{
	"wait": 30000,
	"factoids": {
		"2048": {
			"value": "2048 <http://gabrielecirulli.github.io/2048/>",
			"creator": "ljharb",
			"date": "2014-03-19T23:56:47.738Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"json_encode": {
			"value": "When you need to pass PHP variables to JavaScript, use the PHP method json_encode. For example: var info = (<?php echo json_encode($info); ?>); However, JavaScript goes in .js files ONLY. Don't mix JS with your HTML output. See `!csp`.",
			"popularity": 19,
			"editors": [
				"eboy"
			]
		},
		"w3schools": {
			"value": "W3Schools is not related to the W3C and has many problems: http://w3fools.com/",
			"popularity": 157
		},
		"iframe": {
			"value": "To get the document element of the iframe, use: iframe.contentWindow.document; However, cross-domain access to an iframe is disallowed.",
			"popularity": 17
		},
		"this": {
			"value": "If a function call is of the form `a.b()`, `this` will be the object you accessed the \"b\" property from. Otherwise, if it's of the form `a()`, `this` will be `undefined`, which is turned into the global object if the function isn't in strict mode. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this http://javascriptweblog.wordpress.com/2010/08/30/understanding-javascripts-this/",
			"popularity": 387,
			"editors": [
				"ImBcmDth",
				"dwcook",
				"Maxdamantus",
				"ljharb",
				"sacho"
			],
			"changes": [
				{
					"date": "2014-07-09T07:12:07.458Z",
					"editor": "Maxdamantus",
					"old-value": "If a function is called on an object, object.y(), then `this` within `y` refers to `object`. If called directly: y(), `this` refers to the global object - for browsers it's `window`. `this` can be set explicitly by using y.call(thisArg, argument1, argument2, ...), or with .apply() and .bind(). For further explanation, see: http://javascriptweblog.wordpress.com/2010/08/30/understanding-javascripts-this/",
					"new-value": "If a function call is of the form `a.b()`, `this` will be the object you accessed the \"b\" property from. Otherwise, if it's of the form `a()`, `this` will be `undefined`, which is turned into the global object if the function isn't in strict mode. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this"
				},
				{
					"date": "2014-07-09T07:14:22.099Z",
					"editor": "Maxdamantus",
					"old-value": "If a function call is of the form `a.b()`, `this` will be the object you accessed the \"b\" property from. Otherwise, if it's of the form `a()`, `this` will be `undefined`, which is turned into the global object if the function isn't in strict mode. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this",
					"new-value": "If a function call is of the form `a.b()`, `this` will be the object you accessed the \"b\" property from. Otherwise, if it's of the form `a()`, `this` will be `undefined`, which is turned into the global object if the function isn't in strict mode. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this"
				},
				{
					"date": "2014-08-31T00:48:32.579Z",
					"editor": "ljharb",
					"old-value": "If a function call is of the form `a.b()`, `this` will be the object you accessed the \"b\" property from. Otherwise, if it's of the form `a()`, `this` will be `undefined`, which is turned into the global object if the function isn't in strict mode. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this",
					"new-value": "If a function call is of the form `a.b()`, `this` will be the object you accessed the \\\"b\\\" property from. Otherwise, if it's of the form `a()`, `this` will be `undefined`, which is turned into the global object if the function isn't in strict mode. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this http://javascriptweblog.wordpress.com/2010/08/30/understanding-javascripts-this/"
				},
				{
					"date": "2014-09-02T18:13:15.039Z",
					"editor": "sacho",
					"old-value": "If a function call is of the form `a.b()`, `this` will be the object you accessed the \\\"b\\\" property from. Otherwise, if it's of the form `a()`, `this` will be `undefined`, which is turned into the global object if the function isn't in strict mode. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this http://javascriptweblog.wordpress.com/2010/08/30/understanding-javascripts-this/",
					"new-value": "If a function call is of the form `a.b()`, `this` will be the object you accessed the b property from. Otherwise, if it's of the form `a()`, `this` will be `undefined`, which is turned into the global object if the function isn't in strict mode. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this http://javascriptweblog.wordpress.com/2010/08/30/understanding-javascripts-this/",
					"regex": "s/\\\\\"b\\\\\"/b/"
				},
				{
					"date": "2014-09-02T18:13:54.167Z",
					"editor": "sacho",
					"old-value": "If a function call is of the form `a.b()`, `this` will be the object you accessed the b property from. Otherwise, if it's of the form `a()`, `this` will be `undefined`, which is turned into the global object if the function isn't in strict mode. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this http://javascriptweblog.wordpress.com/2010/08/30/understanding-javascripts-this/",
					"new-value": "If a function call is of the form `a.b()`, `this` will be the object you accessed the `b` property from. Otherwise, if it's of the form `a()`, `this` will be `undefined`, which is turned into the global object if the function isn't in strict mode. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this http://javascriptweblog.wordpress.com/2010/08/30/understanding-javascripts-this/",
					"regex": "s/the b property from/the `b` property from/"
				},
				{
					"date": "2014-10-06T09:48:15.700Z",
					"editor": "Maxdamantus",
					"old-value": "If a function call is of the form `a.b()`, `this` will be the object you accessed the `b` property from. Otherwise, if it's of the form `a()`, `this` will be `undefined`, which is turned into the global object if the function isn't in strict mode. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this http://javascriptweblog.wordpress.com/2010/08/30/understanding-javascripts-this/",
					"new-value": "If a function call is of the form `a.b()`, `this` will be the object you accessed the \"b\" property from. Otherwise, if it's of the form `a()`, `this` will be `undefined`, which is turned into the global object if the function isn't in strict mode. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this http://javascriptweblog.wordpress.com/2010/08/30/understanding-javascripts-this/",
					"regex": "s/`b`/\"b\"/"
				}
			]
		},
		"closures": {
			"value": "For experienced JavaScripters: http://jibbering.com/faq/faq_notes/closures.html For newbies: http://www.javascriptkit.com/javatutors/closures.shtml",
			"popularity": 79
		},
		"cross-domain": {
			"alias": "same",
			"popularity": 2
		},
		"closure": {
			"alias": "closures",
			"popularity": 12
		},
		"paste": {
			"value": "Show some code, but don't paste it on the channel. Sites like http://gist.github.com, http://bpaste.net, http://dpaste.com are cool. You can also use http://jsbin.com , http://requirebin.com or http://jsfiddle.net/ to provide a test case we can run and help you with your problem.",
			"popularity": 915,
			"editors": [
				"niggler",
				"gkatsev",
				"CoverSlide",
				"PigDude",
				"MJCD",
				"Sorella",
				"totemizer",
				"ashnur"
			]
		},
		"json": {
			"value": "JavaScript Object Notation, see http://www.json.org/. Looks like literals in JS, but object keys and strings are always double-quoted. Remember: if it's not a string (if you don't need JSON.parse) it's not JSON. To convert an object to JSON, use JSON.stringify.",
			"popularity": 54,
			"editors": [
				"therealklanni"
			],
			"changes": [
				{
					"date": "2014-04-15T17:40:42.302Z",
					"editor": "therealklanni",
					"old-value": "JavaScript Object Notation, see http://www.json.org/. Looks like literals in JS, but object keys and strings are always double-quoted. Remember: if it's not a string (if you don't need JSON.parse) it's not JSON.",
					"new-value": "JavaScript Object Notation, see http://www.json.org/. Looks like literals in JS, but object keys and strings are always double-quoted. Remember: if it's not a string (if you don't need JSON.parse) it's not JSON. To convert an object to JSON, use JSON.stringify."
				}
			]
		},
		"code": {
			"value": "Show some code, but don't paste it on the channel. Sites like http://gist.github.com/ and http://bpaste.net/ are cool. You can also use http://jsbin.com , http://requirebin.com or http://jsfiddle.net/ to provide a test case we can run and help you with your problem.",
			"popularity": 541,
			"editors": [
				"CoverSlide",
				"ph88",
				"gkatsev",
				"blackkbot"
			],
			"changes": [
				{
					"date": "2014-01-13T12:05:04.853Z",
					"editor": "blackkbot",
					"old-value": "Show some code. Code examples should be complete (sufficient to show the problem) and minimal (as short as possible while remaining complete). Go to http://jsbin.com/ or see !paste.",
					"new-value": "Show some code, but don't paste it on the channel. Sites like http://gist.github.com/ and http://bpaste.net/ are cool. You can also use http://jsbin.com , http://requirebin.com or http://jsfiddle.net/ to provide a test case we can run and help you with your problem."
				}
			]
		},
		"callee": {
			"alias": "recursion",
			"popularity": 2
		},
		"harmony": {
			"alias": "es6",
			"popularity": 2
		},
		"cornify": {
			"value": "`^nn~ <http://www.cornify.com/>",
			"popularity": 14
		},
		"ecmascript": {
			"value": "ECMAScript (pronounced Ek-ma-script) is the written, non-proprietary standard of JavaScript. JavaScript is a Mozilla-specific dialect which adds some features. JScript is Microsoft's dialect. ActionScript is a dialect used in Adobe Flash.",
			"popularity": 8
		},
		"scoping": {
			"value": "http://johnkpaul.com/blog/2013/02/11/what-is-hoisting-really/ https://developer.mozilla.org/en/JavaScript/Reference/Scope_Cheatsheet",
			"popularity": 52,
			"editors": [
				"eboy"
			]
		},
		"var": {
			"value": "Always declare variables with `var`, or you will pollute the global scope. Using `var` will limit access to that variable to the current scope, whatever it is.",
			"popularity": 71,
			"editors": [
				"j201"
			]
		},
		"forms": {
			"value": "Accessing form elements: Don't use document.formName.elementName. Use document.forms.formName.elements.elementName or getElementById, getElementsByName, or querySelector",
			"popularity": 23
		},
		"scope": {
			"alias": "scoping",
			"popularity": 24
		},
		"form": {
			"alias": "forms"
		},
		"hoisting": {
			"alias": "scoping",
			"popularity": 23
		},
		"same origin": {
			"alias": "cross-domain",
			"popularity": 2
		},
		"jsonlint": {
			"value": "JSONLint - The JSON Validator. - http://www.jsonlint.com/",
			"popularity": 0
		},
		"textContent": {
			"value": "There is no single cross-browser way to get the inner text from an element (without HTML), so you need the following: var text = element.textContent || element.innerText;",
			"popularity": 1
		},
		"innerHTML": {
			"alias": "textContent"
		},
		"xy": {
			"value": "The XY problem: You want to do X, but don't know how. You think you can solve it using Y, but don't know how to do that either. You ask about Y, which is a strange thing to want to do. Just ask about X.",
			"popularity": 357,
			"editors": [
				"j201",
				"sukima"
			]
		},
		"flxhr": {
			"value": "\"flXHR [flĕkʹsər], (flex-er), is a cross-browser, XHR-compatible tool for cross-domain Ajax (Flash) communication. It utilizes an invisible flXHR.swf instance that acts as sort of a client-side proxy for requests. https://github.com/flensed/flXHR\"",
			"popularity": 6
		},
		"float2int": {
			"value": "|0 is bitwise OR with 0 - a quick way to convert any value to a 32-bit integer, as well as any of these: x|0, x>>0, ~~x.",
			"popularity": 2
		},
		"|0": {
			"alias": "float2int"
		},
		"typeof": {
			"value": "The typeof operator returns a string indicating the type of the unevaluated operand. Returns 'object', 'boolean', 'number', 'string', 'function', 'xml', or 'undefined'. Arrays return 'object'. Use: if (typeof variable !== \"undefined\") to check if a variable is defined.",
			"popularity": 18
		},
		"comet": {
			"value": "http://en.wikipedia.org/wiki/Comet_(programming)",
			"popularity": 1
		},
		"rte": {
			"value": "http://ckeditor.com/ http://tinymce.moxiecode.com/ http://www.themaninblue.com/experiment/widgEditor/ http://www.mozilla.org/editor/midasdemo/",
			"popularity": 0
		},
		"prettyprint": {
			"value": "Online JavaScript beautifier - http://jsbeautifier.org/",
			"popularity": 1
		},
		"eloquent": {
			"value": "Eloquent JavaScript is a comprehensive introductory Web-based book with examples and a built-in interpreter. http://eloquentjavascript.net/",
			"popularity": 848,
			"editors": [
				"ericelliott",
				"ashnur"
			]
		},
		"tias": {
			"value": "Try it and see, why dontcha?",
			"popularity": 100
		},
		"css": {
			"value": "Use Javascript to manipulate CSS stylesheets in a page. http://www.quirksmode.org/dom/w3c_css.html For other CSS problems, please try the #css channel.",
			"popularity": 14
		},
		"recursion": {
			"value": "See !recursion",
			"popularity": 30
		},
		"ask": {
			"value": "Don't ask to ask, or if anyone is here or alive or uses something. Just ask your question. http://www.mikeash.com/getting_answers.html http://www.catb.org/esr/faqs/smart-questions.html",
			"popularity": 406,
			"editors": [
				"hemanth",
				"eboy",
				"CoverSlide",
				"Mortchek",
				"therealklanni"
			],
			"changes": [
				{
					"date": "2014-03-05T19:17:12.296Z",
					"editor": "therealklanni",
					"old-value": "Don't ask to ask, or if anyone is here or alive or uses something. Just ask your question. http://www.mikeash.com/getting_answers.html http://www.catb.org/esr/faqs/smart-questions.html http://guipn.com/how-to-get-helpful-help.htm",
					"new-value": "Don't ask to ask, or if anyone is here or alive or uses something. Just ask your question. http://www.mikeash.com/getting_answers.html http://www.catb.org/esr/faqs/smart-questions.html"
				}
			]
		},
		"let": {
			"value": "The let statement provides a way to associate values with variables within the scope of a block, without affecting the values of like-named variables outside the block. It is currently non-standard, but it will be standardized in ES6.",
			"popularity": 8,
			"editors": [
				"j201"
			]
		},
		"pm": {
			"value": "Never ask for help in pm. People who help in the channel do so in part because of the rewards that brings; public recognition and helping *everyone* listening to learn. Why would anyone want to help in pm?",
			"popularity": 41,
			"editors": [
				"j201"
			]
		},
		"select": {
			"value": "To get the value of a <select> form field: var select = document.getElementById(\"select\"); var value = select.options[select.selectedIndex].value;",
			"popularity": 4
		},
		"doesn't work": {
			"value": "What do you mean it doesn't work? Is it unemployed? What happens when you try to run it? What's the output? What's the error message? What did you want or expect to happen?",
			"popularity": 241,
			"editors": [
				"dwcook"
			]
		},
		"$": {
			"value": "The `$` character has no special meaning in JavaScript, other than being allowed as a character in an variable name. It is used by some JavaScript libraries like jQuery, but traditionally used in machine generated JavaScript to avoid interference with other identifiers.",
			"popularity": 16
		},
		"jquery": {
			"value": "Please visit #jquery for questions related to jQuery. (by typing /join #jquery)",
			"popularity": 197,
			"editors": [
				"niggler",
				"Mortchek",
				"PigDude",
				"devin",
				"dwcook",
				"jaspr"
			]
		},
		"mdc": {
			"value": "Mozilla Developer Network @ http://developer.mozilla.org/",
			"popularity": 52
		},
		"mdn": {
			"alias": "mdc",
			"popularity": 41
		},
		"debugging": {
			"alias": "console"
		},
		"eval": {
			"value": "The `eval` function (and its cousins) have two particular use cases: macro expansion, and evaluation of dynamically generated programs. If you don't know any of these terms, `eval` is not the answer for your problem. For more information on what `eval` is and what it should be used for, see: http://blog.racket-lang.org/2011/10/on-eval-in-dynamic-languages-generally.html.",
			"popularity": 41,
			"editors": [
				"Sorella"
			]
		},
		"property access": {
			"value": "Property access: myobject.foo is just another way of saying myobject['foo']. This means that if property = 'foo', it's also the same as myobject[property].",
			"popularity": 2
		},
		"hammertime": {
			"value": "━━▊ ━━▊ ━━▊",
			"popularity": 22
		},
		"wait": {
			"value": "Don't feel ignored and repeat your question quickly; if nobody knows your answer, nobody will answer you. While you wait, try searching https://developer.mozilla.org/en/JavaScript or https://developer.mozilla.org/en/DOM || You might also consider reading: http://www.catb.org/~esr/faqs/smart-questions.html",
			"popularity": 13
		},
		"encodeURIComponent": {
			"value": "Always use `encodeURIComponent` to put query strings together. For example: \"foo=\"+encodeURIComponent(foo)+\"&bar=\"+encodeURIComponent(bar). Strings are encoded in UTF-8 format.",
			"popularity": 1
		},
		"encodeURI": {
			"alias": "encodeURIComponent"
		},
		"escape": {
			"alias": "encodeURIComponent"
		},
		"document.write": {
			"value": "document.wrong. Please use something more modern and less prone to doing confusing things. This function tries to write to the current document. If the document has already been processed, the document will be replaced with a blank one with your argument. If you don't want that, use the proper DOM methods instead.",
			"popularity": 153
		},
		"cross-browser": {
			"value": "\"Cross-browser\" is a buzz word used to describe a resource that works in multiple browsers. However, its meaning is diluted in popular culture. Its true meaning is a described resource that works in a maximal amount of browsers, therefore working \"across\" environmental divides. See !multi-browser for the popular, misused definition.",
			"popularity": 2
		},
		"quirksmode": {
			"alias": "cross-browser"
		},
		"rimshot": {
			"value": "Ba dun tshh... http://instantrimshot.com/classic/?sound=rimshot",
			"popularity": 6
		},
		"sadtrombone": {
			"value": "Wah wah wah waahhh... http://www.sadtrombone.com/",
			"popularity": 1
		},
		"ugt": {
			"value": "Universal Greeting Time (or UGT) is a convention that states when a user enters an IRC channel it is always morning and upon leaving it is always night, regardless of the actual physical locations of the users in the channel. http://www.total-knowledge.com/~ilya/mips/ugt.html",
			"popularity": 54
		},
		"crickets": {
			"value": "crickets *chirp* *chirp* *chirp*... http://instantrimshot.com/index.php?sound",
			"popularity": 3
		},
		"jsfiddle": {
			"alias": "code",
			"popularity": 14
		},
		"member access": {
			"alias": "property access"
		},
		"ES5": {
			"value": "ES5 is edition 5 of ECMA-262, the ECMAScript specification: http://es5.github.com/ http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf",
			"popularity": 0
		},
		"w3fools": {
			"alias": "w3schools",
			"popularity": 26
		},
		"innerText": {
			"alias": "textContent"
		},
		"console": {
			"value": "The console object will provide you with an easy way to check the values of some variables, instead of the blocking alert() function. See !debug",
			"popularity": 82,
			"editors": [
				"ashnur"
			]
		},
		"debug": {
			"value": "Browser-based debuggers -- Firefox <https://developer.mozilla.org/en-US/docs/Tools/Web_Console>, Safari <https://developer.apple.com/technologies/safari/developer-tools.html>, Chrome <https://developers.google.com/chrome-developer-tools/docs/overview>, Opera <http://www.opera.com/dragonfly/>, IE <http://msdn.microsoft.com/en-us/library/dd565625%28v=vs.85%29>",
			"popularity": 232,
			"editors": [
				"j201",
				"FireFly"
			]
		},
		"events": {
			"value": "QuirksMode Events guide <http://www.quirksmode.org/js/introevents.html>",
			"popularity": 118
		},
		"botabuse": {
			"value": "Please investigate me in a private message, so we can keep the channel clutter to a minimum. /msg ecmabot usage",
			"popularity": 26
		},
		"abuse": {
			"alias": "botabuse",
			"popularity": 13
		},
		"about": {
			"value": "I'm written entirely in JavaScript using Node.js. See under my covers at Github: <https://github.com/oftn/oftn-bot>",
			"popularity": 85
		},
		"help": {
			"value": "For help, ask your question. Be patient. Code samples should be pasted in a paste service (see !paste). Tell us 1) what you want to happen, 2) what is actually happening, and 3) any error messages you find (see !describe and !debug).",
			"popularity": 2228,
			"editors": [
				"ashnur"
			]
		},
		"bracket access": {
			"value": "yourObject.foobar is just another way of saying yourObject['foobar']. So of course if varName = 'foobar', then it's also the same as yourObject[varName]. Dot notation is preferred to bracket notation except where the property name would be an invalid identifier. The same applies to quoting keys inside object literals - don't do it unless you have to.",
			"popularity": 22,
			"editors": [
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-04-15T00:49:09.974Z",
					"editor": "ljharb",
					"old-value": "yourObject.foobar is just another way of saying yourObject['foobar']. So of course if varName = 'foobar', then it's also the same as yourObject[varName]. Dot notation is preferred to bracket notation except where the property name would be an invalid identifier. The same applies to keys inside object literals.",
					"new-value": "yourObject.foobar is just another way of saying yourObject['foobar']. So of course if varName = 'foobar', then it's also the same as yourObject[varName]. Dot notation is preferred to bracket notation except where the property name would be an invalid identifier. The same applies to quoting keys inside object literals - don't do it unless you have to."
				}
			]
		},
		"bracketaccess": {
			"alias": "bracket access"
		},
		"bracket": {
			"alias": "bracket access",
			"popularity": 17
		},
		"ops": {
			"value": "The ##javascript ops are: G﻿arethAdams b﻿uu G﻿ozzy B﻿oki P﻿hrogz W﻿oosta d﻿orward T﻿wey i﻿nimino gk﻿atsev d﻿wcook. In case of an emergency requiring op attention, activate !emergency",
			"popularity": 107,
			"editors": [
				"Mortchek",
				"dwcook"
			]
		},
		"str->num": {
			"value": "parseFloat(str, 10), parseInt(str, 10), +str",
			"popularity": 2
		},
		"string->num": {
			"alias": "str->num"
		},
		"not working": {
			"alias": "doesn't work"
		},
		"resources": {
			"value": "!books, !es5, !gcu, !mdn, !owsc, !quirksmode, !caniuse, !crockford",
			"popularity": 9,
			"editors": [
				"Agamemnus",
				"Havvy"
			],
			"changes": [
				{
					"date": "2013-12-21T07:57:26.552Z",
					"editor": "Agamemnus",
					"old-value": "!eloquent, !es5, !gcu, !mdn, !owsc, !quirksmode",
					"new-value": "!eloquent, !es5, !gcu, !mdn, !owsc, !quirksmode, !caniuse"
				},
				{
					"date": "2013-12-26T07:18:25.937Z",
					"editor": "Havvy",
					"old-value": "!eloquent, !es5, !gcu, !mdn, !owsc, !quirksmode, !caniuse",
					"new-value": "!books, !es5, !gcu, !mdn, !owsc, !quirksmode, !caniuse, !crockford"
				}
			]
		},
		"atwood's law": {
			"value": "Any application that can be written in JavaScript, will eventually be written in JavaScript.",
			"popularity": 2
		},
		"associative": {
			"value": "Arrays in JS are not associative arrays (like in PHP), but are intended to be accessed by numeric index. \"var a=[]; a.foo = 1;\" is not standard usage. http://andrewdupont.net/2006/05/18/javascript-associative-arrays-considered-harmful/",
			"popularity": 10
		},
		"es5": {
			"value": "An annotated, hyperlinked, HTML view of Edition 5.1 of the ECMAScript Specification. <http://es5.github.com/>",
			"popularity": 50
		},
		"node.js": {
			"value": "Node.js is an event-driven I/O framework for the V8 JavaScript engine on Unix-like and Windows platforms. It is intended for writing scalable network programs such as web servers. For Node.js help, see #node.js",
			"popularity": 25
		},
		"str->int": {
			"value": " [parseInt('1', 10), Number('1'), +'1', 1*'1', ~~'1', '1'>>0, '1'|0] // each item in the list is a way of doing string->int conversions. Items from ~~ onwards only work for 32bit integers. You likely don't want parseInt, unless you want to convert something like `1001 nights` to the number `1001`. See !parseint.",
			"popularity": 16,
			"editors": [
				"Sorella"
			]
		},
		"garden": {
			"value": "JavaScript Garden is a growing collection of documentation about the most quirky parts of the JavaScript programming language. It gives advice to avoid common mistakes, subtle bugs, as well as performance issues and bad practices that non-expert JavaScript programmers may encounter on their endeavours into the depths of the language. <http://bonsaiden.github.com/JavaScript-Garden/>",
			"popularity": 3
		},
		"numbers": {
			"value": "The Number type has exactly 2^64 − 2^53 + 3 values, representing the double-precision 64-bit format IEEE 754 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 2^53 − 2 distinct “Not-a-Number” values of the IEEE Standard are represented as a single special NaN value. : http://www.2ality.com/2012/04/number-encoding.html",
			"popularity": 57,
			"editors": [
				"ashnur"
			]
		},
		"objects": {
			"value": "A JavaScript object is a set of properties. A property name is a string, a property value is any JS value. See: Working with Objects https://developer.mozilla.org/en/JavaScript/Guide/Working_with_Objects",
			"popularity": 17
		},
		"enumeration": {
			"value": "The mechanics and order of enumerating the properties is not specified. Properties of the object being enumerated may be deleted during enumeration.",
			"popularity": 1
		},
		"undefined": {
			"value": "The undefined type has exactly one value, called `undefined`. Any variable that has not been assigned a value has the value `undefined`.",
			"popularity": 6
		},
		"booleans": {
			"value": "The boolean type represents a logical entity having two values, called `true` and `false`.",
			"popularity": 1
		},
		"minimal": {
			"value": "A minimal test case should contain precisely the HTML and JavaScript necessary to demonstrate the problem, no more and no less. If the JavaScript is more than 42 lines, it is probably not a minimal test case.",
			"popularity": 126
		},
		"psychic": {
			"value": "You're asking a JavaScript question, but you're not letting us know what you are doing. Please, show us the HTML/JS that the browser sees WHEN THE PROBLEM OCCURS. If you have content inserted by ajax, paste the code *with* that content. We're not psychic, dude. See also !minimal",
			"popularity": 5
		},
		"dom": {
			"value": "The DOM API allows you to interact with your document with JavaScript. <https://developer.mozilla.org/en/DOM>",
			"popularity": 28
		},
		"node": {
			"alias": "node.js",
			"popularity": 11
		},
		"mootools": {
			"value": "For help with MooTools-related problems, visit the #mootools channel.",
			"popularity": 2
		},
		"equivalent": {
			"value": "Instead of asking what's JavaScript's equivalent of `x' in `y' language, tell us what `x' does, and what you expect to achieve using it. Chances are we don't know `y', or you're trying something silly in JS.",
			"popularity": 0
		},
		"enter": {
			"value": "Please try to keep your questions/responses on one line. Don't use the \"Enter\" key as punctuation!",
			"popularity": 13
		},
		"usage": {
			"value": "You may use me to run tiny JavaScript snippets and retrieve factoids. See <https://github.com/oftn/oftn-bot/wiki/Guide-to-Ecmabot>.",
			"popularity": 70
		},
		"jshint": {
			"value": "A fork of jslint, made to be more configurable on how strict you want it to be, which is overall a great way to make your programs less error-prone. <http://jshint.com/>",
			"popularity": 17,
			"editors": [
				"yorick",
				"Sorella"
			]
		},
		"jslint": {
			"value": "Douglas Crockford's tool for testing his 'Code Conventions' for JavaScript. It includes both syntax checking and very particular style conventions, but is an excellent way to make your programs less error-prone. <http://www.jslint.com/> See also !jshint for a similar tool that's less particular about style.",
			"popularity": 18,
			"editors": [
				"yorick"
			]
		},
		"uuid": {
			"value": "'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {var r = Math.random()*16|0,v=c=='x'?r:r&0x3|0x8;return v.toString(16);});",
			"popularity": 4
		},
		"eventintro": {
			"value": "JavaScript - Introduction to Events <http://www.quirksmode.org/js/introevents.html>"
		},
		"gtfo": {
			"value": "This is a channel for help with JavaScript, the language, not for the APIs of some JavaScript library you found. Read the documentation for your library, contact the maintainer, find their IRC channel, but don't expect us to know how it works (see !shoo).",
			"popularity": 19
		},
		"homework": {
			"value": "We won't do your homework for you. Period. We can help, but we'll want to see some effort, and we'll expect you to read docs rather than get spoon-fed.",
			"popularity": 34
		},
		"no": {
			"value": "Don't make shit up.",
			"popularity": 17
		},
		"spelling": {
			"value": "Spelling and capitalization are important in programming, unless you are using PHP.",
			"popularity": 17
		},
		"submit": {
			"value": "Do you have a form element with name=\"submit\"? That confuses some browsers. When you call form.submit(), it thinks you're talking about the name=\"submit\" element."
		},
		"sleep": {
			"value": "JavaScript doesn't have a sleep command -- as it's single threaded (if that makes no sense, ask). Instead, use the setTimeout function. Example: `do_this(); window.setTimeout(do_this_in_after_at_least_2seconds, 2e3);`",
			"popularity": 15,
			"editors": [
				"Sorella"
			]
		},
		"ternary": {
			"value": "var result = expr ? a : b; is equivalent to: var result; if (expr) { result = a; } else { result = b; }",
			"popularity": 3
		},
		"performance": {
			"value": "Speed Up Your JavaScript [including dom manipulation]: <http://www.youtube.com/watch?v=mHtdZgou0qU#t=131s> (56 minutes)",
			"popularity": 12
		},
		"alert": {
			"value": "The alert() function opens a simple window that blocks your script to show a message box. For debugging purposes, you should use the console functions. See !console",
			"popularity": 78
		},
		"prompt": {
			"value": "The prompt() function opens a simple window that blocks your script to show a message box with an area for the user to enter text. This text is then returned (or null if no text was entered).",
			"popularity": 4
		},
		"pad": {
			"value": "function pad2(n){return (\"0\"+n).slice(-2)}",
			"popularity": 2
		},
		"console.log": {
			"alias": "console",
			"popularity": 1
		},
		"default": {
			"value": "JavaScript has no default parameters. You can handle this in different ways depending on what data you consider a valid value. If anything but undefined is valid, use `if (typeof x === 'undefined') { x = 'default'; }` if anything but null and undefined are valid, use `if (x == null) { x = default'; }` if anything but falsy values are valid, use `if (!x) { x = 'default'; } or `x = x || 'default';`.",
			"popularity": 31
		},
		"speed": {
			"value": "Yahoo! Best Practices for Speeding Up Your Web Site <http://developer.yahoo.com/performance/rules.html>",
			"popularity": 1
		},
		"php": {
			"alias": "backend",
			"popularity": 20
		},
		"debugger": {
			"alias": "debug",
			"popularity": 3
		},
		"chromedevtools": {
			"value": "http://www.youtube.com/watch?v=N8SS-rUEZPg",
			"popularity": 5
		},
		"tag": {
			"value": "Know the difference between \"element\" and \"tag\". In \"<p id=x>...</p>\", \"<p id=x>\" is a start tag, and \"</p>\" is an end tag. Taken together, the entire paragraph is a p *element*, not a tag. document.getElementById('x') returns an element, not a tag. Tags do not exist in the DOM, only in the markup.",
			"popularity": 5
		},
		"`": {
			"value": "A relic of a lost age",
			"popularity": 2
		},
		"html-regex": {
			"value": "http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454",
			"popularity": 1
		},
		"spec": {
			"value": "Language Specification (3 [widely supported]) http://www.mozilla.org/js/language/E262-3.pdf (5 [current]) http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf You can use !ecma topic or !ecma 1.2.3 to get a link to specific parts of ECMA-262 5th edition",
			"popularity": 11
		},
		"compat": {
			"value": "ECMAScript 5 compatibility table by kangax: <http://kangax.github.com/es5-compat-table/>. Also see !quirksmode",
			"popularity": 7
		},
		"atwood": {
			"alias": "atwood's law",
			"popularity": 2
		},
		"js": {
			"value": "did you mean: recursive acronym for JavaScript is not Java.",
			"popularity": 17
		},
		"comparisons": {
			"value": "Using == and != should be avoided, since they perform coercion giving unexpected results. Use === and !== instead. See also: http://zero.milosz.ca/ http://es5.github.io/#x11.9.3",
			"popularity": 66,
			"editors": [
				"jrajav",
				"j201",
				"dsamarin",
				"Sorella"
			],
			"changes": [
				{
					"date": "2014-07-06T05:51:16.880Z",
					"editor": "j201",
					"old-value": "Using == and != should be avoided, since they perform coercion giving unexpected results. Use === and !== instead. <http://zero.milosz.ca/> See also: http://es5.github.io/#x11.9.3",
					"new-value": "Using == and != should be avoided, since they perform coercion giving unexpected results. Use === and !== instead. http://zero.milosz.ca/ See also: http://es5.github.io/#x11.9.3",
					"regex": "s/[<>]//g"
				},
				{
					"date": "2014-07-06T05:52:09.582Z",
					"editor": "j201",
					"old-value": "Using == and != should be avoided, since they perform coercion giving unexpected results. Use === and !== instead. http://zero.milosz.ca/ See also: http://es5.github.io/#x11.9.3",
					"new-value": "Changed `comparisons` to: Using == and != should be avoided, since they perform coercion giving unexpected results. Use === and !== instead. See also: http://zero.milosz.ca/ http://es5.github.io/#x11.9.3"
				},
				{
					"date": "2014-07-06T05:53:12.499Z",
					"editor": "j201",
					"old-value": "Changed `comparisons` to: Using == and != should be avoided, since they perform coercion giving unexpected results. Use === and !== instead. See also: http://zero.milosz.ca/ http://es5.github.io/#x11.9.3",
					"new-value": "Using == and != should be avoided, since they perform coercion giving unexpected results. Use === and !== instead. See also: http://zero.milosz.ca/ http://es5.github.io/#x11.9.3"
				}
			]
		},
		"libraries": {
			"alias": "gtfo"
		},
		"libs": {
			"alias": "gtfo"
		},
		"sosf": {
			"value": "Son of Suckerfish Dropdowns, a simple technique for making dropdown menus with minimal JavaScript merely for support in IE6: http://www.htmldog.com/articles/suckerfish/dropdowns/",
			"popularity": 2
		},
		"alot": {
			"value": "Do you like to hug alot? http://bit.ly/aVDMTo",
			"popularity": 1
		},
		"drde": {
			"value": "It's U+22F1 DOWN RIGHT DIAGONAL ELLIPSIS \"⋱\"",
			"popularity": 4
		},
		"capitalization": {
			"alias": "spelling"
		},
		"private": {
			"value": "Public and private style scoping does not exist in the traditional sense in javascript. For a good knowledge base on the topic, please see http://javascript.crockford.com/private.html",
			"popularity": 17,
			"editors": [
				"MJCDead"
			]
		},
		"source": {
			"value": "My source code is available at: https://github.com/oftn/oftn-bot/",
			"popularity": 68
		},
		"not-our-library": {
			"alias": "gtfo"
		},
		"firebug": {
			"value": "see !debug",
			"popularity": 7,
			"editors": [
				"ashnur"
			]
		},
		"won't work": {
			"alias": "doesn't work"
		},
		"same": {
			"value": "The same-origin policy prevents access to most methods and properties across pages on different sites (even those inside iframes). Short version: for XHR and cross-frame-interaction to work, this://this.this.and:this/ have to be the same. Alternatives: A server-side proxy, the Dojo iframe trick, CORS, and JSONP. See also: !jsonp, !cors.",
			"popularity": 99
		},
		"jsonp": {
			"value": "JSONP is an insecure, but workable way to allow cross-domain requests. It consists of inserting a <script> element pointing to a generated script which runs the callback you specify in URL with the response data: <script src=\"http://some.api/api.js?callback=blah\"/> and server has in api.js ’<?= GET['callback'] ?>(<? '{generate:\"response\", data: \"here\"}' ?>)’. See also: !same",
			"popularity": 29
		},
		"cors": {
			"value": "Cross-origin resource sharing (http://www.w3.org/TR/cors/) allows browser to negotiate access for cross-domain requests - for example with XMLHttpRequest - as a way to work around the same-origin policy. See also: !same, http://caniuse.com/cors , https://developer.mozilla.org/en/HTTP_access_control",
			"popularity": 109
		},
		"point": {
			"value": "Don't ask to ask, don't ask if someone is available. Just get to the point, and then wait a while.",
			"popularity": 4
		},
		"http": {
			"value": "Any Web developer worthy of the name must have a strong understanding of HTTP. http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol, http://www.w3.org/Protocols/rfc2616/rfc2616.html, http://www.jmarshall.com/easy/http/",
			"popularity": 9,
			"editors": [
				"gkatsev"
			],
			"changes": [
				{
					"date": "2014-10-03T00:52:25.478Z",
					"editor": "gkatsev",
					"old-value": "Any Web developer worthy of the name must have a strong understanding of HTTP. http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol, http://www.w3.org/Protocols/rfc2616/rfc2616.html, http://www.jmarshall.com/easy/http/, and http://tomayko.com/writings/rest-to-my-wife should be useful.",
					"new-value": "Any Web developer worthy of the name must have a strong understanding of HTTP. http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol, http://www.w3.org/Protocols/rfc2616/rfc2616.html, http://www.jmarshall.com/easy/http/"
				}
			]
		},
		"reduction": {
			"value": "How and why to reduce your page: http://css-tricks.com/reduced-test-cases/ http://webkit.org/quality/reduction.html https://developer.mozilla.org/en/Reducing_testcases",
			"popularity": 1
		},
		"ajax-upload": {
			"value": "Ajax Upload; A file upload script with progress-bar, drag-and-drop: http://valums.com/ajax-upload/",
			"popularity": 1
		},
		"guide": {
			"value": "MDN JavaScript Guide: https://developer.mozilla.org/en/javascript/guide",
			"popularity": 3
		},
		"clj": {
			"value": "comp.lang.javascript, the JS Usenet group: http://groups.google.com/group/comp.lang.javascript/topics",
			"popularity": 1
		},
		"history": {
			"value": "Old style, change window.location.hash: https://developer.mozilla.org/en/DOM/window.location | Newer style, listen for window's hashchange event: https://developer.mozilla.org/en/DOM/window.onhashchange | Newest style, use the HTML5 History API: https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history",
			"popularity": 3
		},
		"last one only": {
			"value": "If something is only being applied to the 'last' one of many, you have a scoping problem. e.g.: in for (i=0; i<5; ++i) {doX(function(){ doY(i) })}; `doY' might only receive 5 as a value. You can solve this using closures, so see !closures. For more info see http://www.mennovanslooten.nl/blog/post/62/",
			"popularity": 96,
			"editors": [
				"yansanmo"
			],
			"changes": [
				{
					"date": "2014-04-20T20:23:09.650Z",
					"editor": "yansanmo",
					"old-value": "If something is only being applied to the 'last' one of many, you have a scoping problem. e.g.: in for (i=0; i<5; ++i) {doX(function(){ doY(i) })}; `doY' might only receive 4 as a value. You can solve this using closures, so see !closures. For more info see http://www.mennovanslooten.nl/blog/post/62/",
					"new-value": "If something is only being applied to the 'last' one of many, you have a scoping problem. e.g.: in for (i=0; i<5; ++i) {doX(function(){ doY(i) })}; `doY' might only receive 5 as a value. You can solve this using closures, so see !closures. For more info see http://www.mennovanslooten.nl/blog/post/62/"
				}
			]
		},
		"jscript": {
			"value": "\"JScript\" is not an abbreviation for JavaScript, but the name of a specific implementation."
		},
		"prototype": {
			"value": "JavaScript uses prototypal inheritance, where Objects inherit directly from other Objects (there's no !classes). This post covers the foundations of that: http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/",
			"popularity": 96
		},
		"innerhtml": {
			"value": "InnerHTML is fast, but has its quirks. DOM methods are a good alternative - without the speed and readability (http://xrl.us/bmaiz). To read a list of innerHTML quirks and possible workarounds, see http://js.isite.net.au/faq/innerHTML)",
			"popularity": 40
		},
		"io": {
			"value": "JavaScript has no notion of input/output. IO, including network access, must be mediated by host objects, which your environment must provide (that is, the environment in which you are running the script, like a browser)"
		},
		"testcase": {
			"value": "Show some code, but don't paste it on the channel. Sites like http://gist.github.com/ and http://bpaste.net/ are cool. You can also use http://jsbin.com , http://requirebin.com or http://jsfiddle.net/ to provide a test case we can run and help you with your problem.",
			"popularity": 62,
			"editors": [
				"MJCD",
				"totemizer",
				"ashnur"
			]
		},
		"properties": {
			"value": "foo.bar and foo[\"bar\"] are both ways to access a property on a JavaScript object; use the latter when the property name is not a legal identifier (e.g. foo[\"my-cats\"] or foo[\"emails[]\"]) or when you need to construct the property name from a variable (e.g. var prop = \"bar\"; var x = foo[prop]).",
			"popularity": 15
		},
		"document.wrong": {
			"alias": "document.write",
			"popularity": 5
		},
		"parseint": {
			"value": "If you want to convert something to a Number, don't use `parseInt`, just convert it to a Number using `Number(x)`. parseInt will convert it to a String, then extract the first numeric characters in that String that are allowed in the specified radix, THEN convert those to a Number. You only use it for things like parseInt('500 days of Summer') => 500",
			"popularity": 32,
			"editors": [
				"sorella"
			]
		},
		"trust": {
			"value": "Stop worrying and TRUST THE GARBAGE COLLECTOR.",
			"popularity": 1
		},
		"gcu": {
			"value": "Google Code University: HTML, CSS, and Javascript from the Ground Up <http://code.google.com/edu/submissions/html-css-javascript/>",
			"popularity": 3
		},
		"owsc": {
			"value": "Opera Web Standards Curriculum: Start-to-finish curriculum for learning modern web standards: <http://dev.opera.com/articles/wsc/>",
			"popularity": 5
		},
		"truthy": {
			"value": "The 'falsy' values in JavaScript are undefined, null, 0, -0, NaN, '', and false. The 'truthy' values are all other values. All objects are truthy. There is nothing both truthy and falsy, or neither truthy nor falsy.",
			"popularity": 72,
			"editors": [
				"Mortchek",
				"ljharb",
				"dwcook",
				"ckknight"
			]
		},
		"operators": {
			"value": "https://developer.mozilla.org/en/JavaScript/Reference/Operators",
			"popularity": 7
		},
		"for..in": {
			"value": "for..in is not to loop through indices/values of an array. Use for(init;cond;step) or Array#forEach. For..in iterates over *all* enumerable properties of an object, without any defined order.",
			"popularity": 13
		},
		"intro": {
			"value": "https://developer.mozilla.org/en-US/learn/javascript",
			"popularity": 8
		},
		"library": {
			"alias": "gtfo",
			"popularity": 2
		},
		"experience": {
			"value": "\"experience is never wasted! don't feel down\"",
			"popularity": 3
		},
		"timeout": {
			"value": "Use setTimeout for guaranteed delay (callbacks will be delayed at least x ms from the last execution). use setInterval for guaranteed frequency (callbacks will be called at least every x ms, regardless of previous executions).",
			"popularity": 15,
			"editors": [
				"gkatsev"
			]
		},
		"holistic-performance": {
			"value": "\"Holistic performance encompasses two notions. A) Performance includes filesize, load time and parse time as well as execution time. B) Try to keep performance across browsers even where possible. From John Resig's speech: http://ontwik.com/javascript/velocity-2011-john-resig-holistic-performance/\"",
			"popularity": 4
		},
		"comma": {
			"value": "\"The humble comma has a more complex role in javascript than it may, at first, appear. Take a gander at this for details : http://javascriptweblog.wordpress.com/2011/04/04/the-javascript-comma-operator/\"",
			"popularity": 8
		},
		"fastest": {
			"value": "Please refrain from asking broad questions such \"What's the easiest way to do X?\" or \"Fastest way to do Y?\". Explain the context, what you want to do and ask one well defined question.",
			"popularity": 6
		},
		"single-threaded": {
			"value": "Browser JS is single-threaded and shares a thread with the rendering engine. That means that the browser can't render the page while it's executing JS, and it can't execute JS while it's rendering the page. There's NO parallelism (except for webworkers).",
			"popularity": 5
		},
		"str2num": {
			"value": "There are a variety of ways to convert a string to a number. See http://phrogz.net/JS/string_to_number.png for the functional \"problems\" with some of them. See http://jsperf.com/convert-string-to-number-techniques for the performance impacts.",
			"popularity": 1
		},
		"property": {
			"alias": "properties",
			"popularity": 2
		},
		"control-click on table cells": {
			"value": "Solution is to add \"-moz-user-select: none;\" for table elements that you want to disable this behavior."
		},
		"coffeescript": {
			"value": "CoffeeScript is not JavaScript; try #coffeescript for help.",
			"popularity": 23,
			"editors": [
				"FireFly"
			]
		},
		"fast": {
			"alias": "fastest"
		},
		"best": {
			"alias": "fastest",
			"popularity": 3
		},
		"next": {
			"value": "Another satisfied customer! NEXT!!",
			"popularity": 198
		},
		"iife": {
			"value": "An \"immediately invoked function expression\" is an expression that both creates and calls a function. As with any function call, a scope is created. \"(function () { /* ... */ }())\" is the most common form. For more info: http://benalman.com/news/2010/11/immediately-invoked-function-expression/",
			"popularity": 290,
			"editors": [
				"dwcook",
				"Agamemnus",
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-03-14T05:16:13.778Z",
					"editor": "Agamemnus",
					"old-value": "An \"immediately invoked function expression\" is an expression that both creates and calls a function. As with any function call, a scope is created. \"(function () { /* ... */ }())\" is a common form. For more info: http://benalman.com/news/2010/11/immediately-invoked-function-expression/",
					"new-value": "An \"immediately invoked function expression\" is an expression that both creates and calls a function. As with any function call, a scope is created. \"(function () { /* ... */ }());\" is a common form. \"void function () {/* ... */} ()\" can also be used. For more info: http://benalman.com/news/2010/11/immediately-invoked-function-expression/"
				},
				{
					"date": "2014-03-15T05:50:25.623Z",
					"editor": "ljharb",
					"old-value": "An \"immediately invoked function expression\" is an expression that both creates and calls a function. As with any function call, a scope is created. \"(function () { /* ... */ }());\" is a common form. \"void function () {/* ... */} ()\" can also be used. For more info: http://benalman.com/news/2010/11/immediately-invoked-function-expression/",
					"new-value": "An \"immediately invoked function expression\" is an expression that both creates and calls a function. As with any function call, a scope is created. \"(function () { /* ... */ }())\" is the most common form. For more info: http://benalman.com/news/2010/11/immediately-invoked-function-expression/"
				}
			]
		},
		"away": {
			"value": "Please do not use noisy away messages and nicks. It is annoying and unnecessary. Use the command \"/away <reason>\" to set your client away silently.",
			"popularity": 7
		},
		"oop": {
			"value": "http://robotlolita.me/2011/10/09/understanding-javascript-oop.html summarizes Object Oriented Programming in Javascript, using concepts from ECMAScript 5, and relating them back to older paradigms from ECMAScript 3",
			"popularity": 351,
			"editors": [
				"gkatsev",
				"Sorella"
			],
			"changes": [
				{
					"date": "2014-06-17T22:16:40.056Z",
					"editor": "Sorella",
					"old-value": "http://robotlolita.github.io/2011/10/09/understanding-javascript-oop.html summarizes Object Oriented Programming in Javascript, using concepts from ECMAScript 5, and relating them back to older paradigms from ECMAScript 3",
					"new-value": "http://robotlolita.me/2011/10/09/understanding-javascript-oop.html summarizes Object Oriented Programming in Javascript, using concepts from ECMAScript 5, and relating them back to older paradigms from ECMAScript 3",
					"regex": "s/\\.github\\.io/.me/"
				}
			]
		},
		"[]": {
			"alias": "properties",
			"popularity": 6
		},
		"cast": {
			"value": "boolean: !!o, Boolean(o). number: +o, Number(o). string: String(o), '' + o",
			"popularity": 7
		},
		"pask": {
			"value": "Paste your code at http://jsfiddle.net. If you have a question, please just ask it. Don't look for topic experts. Don't ask to ask. Don't PM! Just ask the question straight out. http://catb.org/~esr/faqs/smart-questions.html",
			"popularity": 4
		},
		"lol": {
			"value": "Thou shalt not type LOL unless you are really laughing out loud.",
			"popularity": 21
		},
		"equivalent of x": {
			"value": "Instead of asking \"What's the equivalent of language Y's X\", describe the feature you want. Chances are we don't know what language Y is or what feature X does.",
			"popularity": 1
		},
		"learn-js": {
			"value": "Learn JavaScript https://developer.mozilla.org/en-US/learn/javascript",
			"popularity": 43
		},
		"plz": {
			"value": "http://dominik.honnef.co/posts/2011/07/don_t_abbreviate__thanks____sorry__or__please_/",
			"popularity": 1
		},
		"format": {
			"value": "\"inimino: It is ridiculous to use formatting conventions as a proxy for code quality. ...snip... If you are reduced to picking software on the basis of whether the author prefers your particular coding style or not, you may just as well admit that you do not know how to discern code quality and flip a coin instead.\"",
			"popularity": 6
		},
		"kitten": {
			"value": "Whenever you pass a String to setTimeout, God kills a kitten! Think of the poor kittens! Since passing JS in a string to these functions means an implicit eval, you likely don't want that. Also see: first-class functions;",
			"popularity": 6
		},
		"first-class functions": {
			"value": "Functions in JavaScript are first class. This means you can pass it around, store it in variables and do anything you'd do with other values. I.e.: The following are both valid: var foo = {}; console.log(foo); and var foo = function(){ }; console.log(foo);",
			"popularity": 5,
			"editors": [
				"eboy",
				"dwcook"
			]
		},
		"doubleyea": {
			"value": "yea YEAAAAH *screeching guitar*",
			"popularity": 5
		},
		"hey": {
			"value": "\"!ho\"",
			"popularity": 37
		},
		"hughfdjackson": {
			"value": "\"https://github.com/hughfdjackson\""
		},
		"regexp": {
			"value": "Regular Expressions in Javascript: http://www.evolt.org/article/Regular_Expressions_in_JavaScript/17/36435/ .. or more generally: http://www.regular-expressions.info/. Useful tester: http://regexpal.com/",
			"popularity": 17
		},
		"prototype intro": {
			"value": "A short (and practical) explanation of how prototypal inheritance works in JavaScript: http://hughfdjackson.com/javascript/prototypes%3A-the-short%28est-possible%29-story/ For a much more in-depth introduction, see !oop",
			"popularity": 169,
			"editors": [
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-04-04T09:32:31.694Z",
					"editor": "ljharb",
					"old-value": "A short (and practical) explanation of how prototypal inheritance works in JavaScript: http://hughfdjackson.com/javascript/2012/01/05/prototypes:-the-short%28est-possible%29-story/. For a much more in-depth introduction, see !oop",
					"new-value": "A short (and practical) explanation of how prototypal inheritance works in JavaScript: http://hughfdjackson.com/javascript/prototypes%3A-the-short%28est-possible%29-story/ For a much more in-depth introduction, see !oop"
				}
			]
		},
		"mix": {
			"value": "You should not mix HTML and JavaScript. Instead of <button onclick=\"foo()\"> use <button id=\"magicmaker\"> and in your JS document.getElementById('magicmaker').addEventListener('click',foo,false);",
			"popularity": 2
		},
		"kiss": {
			"value": "Keep It Simple, Stupid",
			"popularity": 5
		},
		"inline": {
			"value": "Using inline event handlers is bad practice and results in poorly factored, hard-to-manage code. Consider attaching your events with Javascript, instead, eg: https://developer.mozilla.org/en/DOM/element.addEventListener",
			"popularity": 294
		},
		"gist": {
			"value": "Paste code at https://gist.github.com or a similar site so that we can look over it. Thanks!",
			"popularity": 4
		},
		"diy": {
			"value": "Before you ask your question, ask yourself if you could have discovered it yourself in a javascript console. If so, try it. Feel free to ask *why* something is the way it is, but don't be lazy.",
			"popularity": 3
		},
		"associative array": {
			"value": "In javascript, normal objects can be used as associative arrays: that is, they are unordered collections of key:value pairs. e.g. var data = { first_name: \"bob\", last_name: \"peterson\", age: 34, children: [\"beth\", \"rob\", \"chris\"]}",
			"popularity": 6
		},
		"repl": {
			"value": "REPL stands for 'read-eval-print loop', and is a great way to try your code out. Google for '<your browser> console'. The normal shortcuts are f12 or command/ctrl-shift-I",
			"popularity": 34
		},
		"module pattern": {
			"value": "http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth. See https://github.com/substack/node-browserify and http://requirejs.org/ for alternative module definition and loading support.",
			"popularity": 48
		},
		"schools": {
			"value": "Some useful resources for learning js: https://developer.mozilla.org/en-US/learn/javascript. Also see !eloquent",
			"popularity": 16
		},
		"oink": {
			"value": "^(oo)^"
		},
		"live": {
			"value": "Give us some live code, so we don't have to do it for you. http://jsfiddle.net and http://jsbin.com are great!",
			"popularity": 3
		},
		"delete": {
			"value": "Delete only removes properties from objects, not variables from a scope. See http://perfectionkills.com/understanding-delete/",
			"popularity": 14
		},
		"last one": {
			"alias": "last one only",
			"popularity": 2
		},
		"oop intro": {
			"alias": "prototype intro"
		},
		"bitwise": {
			"value": "Bitwise operators (<<, >>, >>>, ^, &, |, and ~) limit their arguments to 32-bit integers and should not be used with values of unknown size.",
			"popularity": 7
		},
		"regex": {
			"value": "Give us 1. What you want to match, 2. Some sample data 3. Your attempt. http://regexpal.com/ is useful!",
			"popularity": 54
		},
		"equality": {
			"value": "When the types of a and b are the same, 'a == b' and 'a === b' have the same value. Otherwise, == coerces its operands to the same type, and is sometimes true on operands where === is false. On objects (which are mutable), a == b iff mutating a also mutates b. On immutable types (string, number, boolean, undefined, null) a == b iff the values are equal. Equality Table: https://janosch.woschitz.org/javascript-equality-comparison/",
			"popularity": 31,
			"editors": [
				"CoverSlide|TPFR"
			]
		},
		"'ecma5 compat'": {
			"value": "'For a robust list of ES5 compatibility charts, see Kangax's page at : <http://kangax.github.com/es5-compat-table/>'",
			"popularity": 0
		},
		"work": {
			"alias": "doesn't work",
			"popularity": 17,
			"editors": [
				"yorick"
			],
			"changes": [
				{
					"date": "2014-04-02T16:12:15.857Z",
					"editor": "yorick",
					"old-alias": "jobs",
					"new-alias": "doesn't work"
				}
			]
		},
		"example": {
			"value": "don't show us examples that include mistakes out of laziness and ask us why it's not working. We'll tell you about those mistakes. Seriously. What else did you expect?",
			"popularity": 5
		},
		"amiallowed": {
			"value": "Yes, you're allowed to add factoids!",
			"popularity": 4
		},
		"rtfm": {
			"value": "This is a problem you should be able to solve yourself with research. For javascript documentation, see: !mdn 'foo' and !ecma 'foo'",
			"popularity": 19,
			"editors": [
				"inimino"
			]
		},
		"public": {
			"value": "don't direct your question towards one member of the chat who is active & seems knowledgable, but is otherwise unrelated. Ask the channel at large instead.",
			"popularity": 9
		},
		"premature optimisation": {
			"value": "See !premature optimization",
			"popularity": 7
		},
		"premature optimization": {
			"value": "Worrying about efficiency without first identifying real bottlenecks that affect the end-user leads to hard to read, hard to maintain code; and is far slower to write. Unless you can prove that it causes significant and noticeable slow-down, you've probably got bigger things to worry about.",
			"popularity": 16,
			"editors": [
				"j201"
			],
			"changes": [
				{
					"date": "2014-06-17T19:40:41.649Z",
					"editor": "j201",
					"old-value": "Worrying about effeciency without first identifying real bottlenecks that affect the end-user leads to hard to read, hard to maintain code; and is far slower to write. Unless you can prove that it causes significant and noticeable slow-down, you've probably got bigger things to worry about.",
					"new-value": "Worrying about efficiency without first identifying real bottlenecks that affect the end-user leads to hard to read, hard to maintain code; and is far slower to write. Unless you can prove that it causes significant and noticeable slow-down, you've probably got bigger things to worry about.",
					"regex": "s/effeciency/efficiency/"
				}
			]
		},
		"falsy": {
			"alias": "truthy",
			"popularity": 27
		},
		"new array": {
			"value": "The array literal format - [] - is often preferred for array construction to the array constructor - new Array() or Array(), for two reasons. 1) [] is fewer characters without damaging readability, 2) new Array acts the same as [], *except* if you pass a single integer argument; in which case it makes an array whose length is equal to that argument. [] has no such functionality, and hence has no such inconsistencies.",
			"popularity": 10
		},
		"describe": {
			"value": "Please, provide the full scenario for your problem. e.g.: I am trying to do X, I do so by calling APIs Y (see !paste), but Z happens instead. I see the following error messages: [can't call method Y of undefined].",
			"popularity": 73,
			"editors": [
				"ashnur"
			]
		},
		"synchronous": {
			"value": "Please, show a little love to your users and *don't* use synchronous functions that can take more than a couple of mileseconds. JS is single threaded, and the browser can't do anything else while your code is running, including rendering the UI.",
			"popularity": 5
		},
		"env": {
			"value": "javascript is a scripting language; it has no inherent power to interact with anything external. Environments empower js with APIs to do this; which environment are you in?",
			"popularity": 3
		},
		"namespaces": {
			"value": "The horror, the horror…",
			"popularity": 6
		},
		"helpfulhelp": {
			"value": "http://guipn.com/blog/how-to-get-helpful-help/",
			"popularity": 7
		},
		"guest": {
			"value": "'If you switched your nick to something a little more personalized, it would be easier for us to talk to you! Here are some possibilities to get you started: 'pikachu' 'he_man' 'milky_joe' 'beastman'",
			"popularity": 7
		},
		"pols": {
			"value": "JS is not like a lot of languages out there. It'll probably violate the principle of least surprise for people coming from many other languages. While this may be frustrating to start with, it's not inherently a reason that js is 'a bad language'(tm). Keep at it.",
			"popularity": 0
		},
		"study": {
			"value": "List of resources (of varying quality) for further study of JavaScript for web app developers. http://www.impressivewebs.com/javascript-resources-web-app-developers/",
			"popularity": 2
		},
		"api": {
			"value": "An API (or Application Programming Interface) is an interface through which you interact with a software component, such as a library or module.",
			"popularity": 8
		},
		"last-only": {
			"alias": "last one only"
		},
		"last": {
			"alias": "last one only",
			"popularity": 73
		},
		"nouns": {
			"value": "In JavaScript, verbs are equally important as nouns. http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html",
			"popularity": 60,
			"editors": [
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-06-13T11:15:45.357Z",
					"editor": "ljharb",
					"old-value": "In Javascript, verbs are equally important as nouns. http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html",
					"new-value": "In JavaScript, verbs are equally important as nouns. http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html"
				}
			]
		},
		"fe vs fd": {
			"alias": "fe",
			"popularity": 22
		},
		"nfe": {
			"value": "Named Function Expressions: http://kangax.github.com/nfe/",
			"popularity": 12
		},
		"browserling": {
			"value": "test out your cross-browser issues yourself at browserling.com",
			"popularity": 5
		},
		"shoo": {
			"value": "#angularjs - ##bootstrap - #browserify - ##closure-tools - #cordova - #coffeescript - #crosswalk - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs  - #express - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #phantomjs - #phaserio - #phonegap - #prototype - #requirejs - #three.js - #webgl - #yui",
			"popularity": 364,
			"editors": [
				"nathan7",
				"PigDude",
				"Mortchek",
				"j201",
				"Havvy",
				"MJCD",
				"niggler",
				"ljharb",
				"sacho",
				"GreenJello",
				"Agamemnus"
			],
			"changes": [
				{
					"date": "2013-12-27T21:17:52.817Z",
					"editor": "Havvy",
					"old-value": "Dedicated channels: #angularjs - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs - #express - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #moutjs - #node.js - #prototype - #requirejs - ##twitter-bootstrap - #webgl - #yui",
					"new-value": "#angularjs - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs - #express - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs - ##twitter-bootstrap - #webgl - #yui"
				},
				{
					"date": "2014-01-12T01:12:39.610Z",
					"editor": "Havvy",
					"old-value": "#angularjs - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs - #express - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs - ##twitter-bootstrap - #webgl - #yui",
					"new-value": "#angularjs - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs - #express - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs -  #webgl - #yui"
				},
				{
					"date": "2014-01-12T01:12:58.473Z",
					"editor": "Havvy",
					"old-value": "#angularjs - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs - #express - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs -  #webgl - #yui",
					"new-value": "#angularjs - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs - #express - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs -  #webgl - #yui - #fez"
				},
				{
					"date": "2014-01-20T08:47:38.740Z",
					"editor": "ljharb",
					"old-value": "#angularjs - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs - #express - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs -  #webgl - #yui - #fez",
					"new-value": "#angularjs - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs - ##english - #express - #fez - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs -  #webgl - #yui"
				},
				{
					"date": "2014-01-27T05:36:43.015Z",
					"editor": "Havvy",
					"old-value": "#angularjs - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs - ##english - #express - #fez - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs -  #webgl - #yui",
					"new-value": "#angularjs - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs - ##english - #express - #fez - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs - #sweet.js - #webgl - #yui"
				},
				{
					"date": "2014-01-27T05:43:51.009Z",
					"editor": "Havvy",
					"old-value": "#angularjs - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs - ##english - #express - #fez - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs - #sweet.js - #webgl - #yui",
					"new-value": "#angularjs - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs  - #express - #fez - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs - #sweet.js - #webgl - #yui"
				},
				{
					"date": "2014-07-30T20:12:25.877Z",
					"editor": "j201",
					"old-value": "#angularjs - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs  - #express - #fez - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs - #sweet.js - #webgl - #yui",
					"new-value": "#angularjs - ##bootstrap - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs  - #express - #fez - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs - #sweet.js - #webgl - #yui",
					"regex": "s/#browserify/##bootstrap - #browserify/"
				},
				{
					"date": "2014-09-05T12:25:40.773Z",
					"editor": "sacho",
					"old-value": "#angularjs - ##bootstrap - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs  - #express - #fez - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs - #sweet.js - #webgl - #yui",
					"new-value": "#angularjs - ##bootstrap - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs  - #express - #fez - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs - #webgl - #yui",
					"regex": "s/- #sweet.js //"
				},
				{
					"date": "2014-09-05T12:26:01.091Z",
					"editor": "GreenJello",
					"old-value": "#angularjs - ##bootstrap - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs  - #express - #fez - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs - #webgl - #yui",
					"new-value": "#angularjs - ##bootstrap - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs  - #express - #fez - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs - #webgl - #yui"
				},
				{
					"date": "2014-09-30T23:38:46.998Z",
					"editor": "Agamemnus",
					"old-value": "#angularjs - ##bootstrap - #browserify - ##closure-tools - #coffeescript - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs  - #express - #fez - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #prototype - #requirejs - #webgl - #yui",
					"new-value": "#angularjs - ##bootstrap - #browserify - ##closure-tools - #cordova - #coffeescript - #crosswalk - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs  - #express - #fez - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #phaserio - #phonegap - #prototype - #requirejs - #three.js - #webgl - #yui"
				},
				{
					"date": "2014-10-01T00:06:48.063Z",
					"editor": "Agamemnus",
					"old-value": "#angularjs - ##bootstrap - #browserify - ##closure-tools - #cordova - #coffeescript - #crosswalk - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs  - #express - #fez - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #phaserio - #phonegap - #prototype - #requirejs - #three.js - #webgl - #yui",
					"new-value": "#angularjs - ##bootstrap - #browserify - ##closure-tools - #cordova - #coffeescript - #crosswalk - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs  - #express - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #phaserio - #phonegap - #prototype - #requirejs - #three.js - #webgl - #yui"
				},
				{
					"date": "2014-10-05T20:47:03.907Z",
					"editor": "j201",
					"old-value": "#angularjs - ##bootstrap - #browserify - ##closure-tools - #cordova - #coffeescript - #crosswalk - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs  - #express - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #phaserio - #phonegap - #prototype - #requirejs - #three.js - #webgl - #yui",
					"new-value": "#angularjs - ##bootstrap - #browserify - ##closure-tools - #cordova - #coffeescript - #crosswalk - #css - #d3.js - #documentcloud (Backbone, Underscore) - #dojo - #emberjs  - #express - #googlemaps - #grunt - #jadejs - #jquery - #knockoutjs - #mootools - #node.js - #phantomjs - #phaserio - #phonegap - #prototype - #requirejs - #three.js - #webgl - #yui",
					"regex": "s/#phaserio/#phantomjs - #phaserio/"
				}
			]
		},
		"google maps": {
			"value": "You are asking a question about the Google Maps API. Though written in JS, it is out of scope for this channel. The folks in #googlemaps will probably be able to help you better.",
			"popularity": 1
		},
		"googlemaps": {
			"alias": "google maps"
		},
		"bootstrap": {
			"value": "The guys in ##twitter-bootstrap can probably answer your question better than we can.",
			"popularity": 25
		},
		"faq": {
			"value": "http://jibbering.com/faq/",
			"popularity": 4
		},
		"crypto": {
			"value": "Don't try to do encryption or cryptography in browser JavaScript. http://www.matasano.com/articles/javascript-cryptography/",
			"popularity": 21,
			"editors": [
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-03-12T00:48:59.528Z",
					"editor": "ljharb",
					"old-value": "Don't try to do encryption or cryptography in Javascript. http://www.matasano.com/articles/javascript-cryptography/",
					"new-value": "s/Javascript/browser JavaScript"
				},
				{
					"date": "2014-03-12T00:49:20.596Z",
					"editor": "ljharb",
					"old-value": "s/Javascript/browser JavaScript",
					"new-value": "Don't try to do encryption or cryptography in browser JavaScript. http://www.matasano.com/articles/javascript-cryptography/"
				}
			]
		},
		"hello": {
			"value": "hello",
			"popularity": 79,
			"editors": [
				"PigDude"
			]
		},
		"otbs": {
			"value": "The One True Brace style: http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS",
			"popularity": 36
		},
		"arrays": {
			"value": "https://developer.mozilla.org/en/JavaScript/Guide/Predefined_Core_Objects#Array_Object",
			"popularity": 4
		},
		"str_repeat": {
			"value": "String.prototype.repeat = function str_repeat(n) { var undef, str = []; if (n < 0) { return this; } for (var i = 0; i < n; ++i) { str.push(undef); } return str.join(this); }; /* http://jsperf.com/jsstringrepeat/2 */",
			"popularity": 3
		},
		"use a library": {
			"value": "You want to solve a problem that has been solved several times before, and has been distributed as a reusable component for anyone to use. Using a library you can have your cake, and eat it too!",
			"popularity": 0
		},
		"ajax": {
			"value": "XMLHttpRequest, a method for asynchronous fetching of data or files from a server with javascript. https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest (see also: !cors for issues with cross-origin XHR)",
			"popularity": 60,
			"editors": [
				"GreenJello"
			],
			"changes": [
				{
					"date": "2014-02-08T21:08:55.256Z",
					"editor": "GreenJello",
					"old-value": "XMLHttpRequest, a method for asynchronous fetching of pages from javascript. https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest (see also: !cors for issues with cross-origin XHR)",
					"new-value": "XMLHttpRequest, a method for asynchronous fetching of data or files from a server with javascript. https://developer.mozilla.org/en/docs/DOM/XMLHttpRequest (see also: !cors for issues with cross-origin XHR)"
				}
			]
		},
		"xhr": {
			"alias": "ajax",
			"popularity": 9
		},
		"es5 shim": {
			"value": "You can add most ES5 functionality to older (or modern non-compliant) browsers with https://github.com/es-shims/es5-shim/blob/master/es5-shim.js",
			"popularity": 112,
			"editors": [
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-01-06T00:01:06.220Z",
					"editor": "ljharb",
					"old-value": "You can add some ES5 functionality to older browsers with https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js or http://cdnjs.cloudflare.com/ajax/libs/es5-shim/2.0.8/es5-shim.min.js",
					"new-value": "You can add some ES5 functionality to older browsers with https://github.com/es-shims/es5-shim/blob/master/es5-shim.js or http://cdnjs.cloudflare.com/ajax/libs/es5-shim/2.0.8/es5-shim.min.js"
				},
				{
					"date": "2014-02-14T08:55:26.281Z",
					"editor": "ljharb",
					"old-value": "You can add some ES5 functionality to older browsers with https://github.com/es-shims/es5-shim/blob/master/es5-shim.js or http://cdnjs.cloudflare.com/ajax/libs/es5-shim/2.0.8/es5-shim.min.js",
					"new-value": "You can add most ES5 functionality to older browsers with https://github.com/es-shims/es5-shim/blob/master/es5-shim.js"
				},
				{
					"date": "2014-03-14T07:06:58.090Z",
					"editor": "ljharb",
					"old-value": "You can add most ES5 functionality to older browsers with https://github.com/es-shims/es5-shim/blob/master/es5-shim.js",
					"new-value": "You can add most ES5 functionality to older (or modern non-compliant) browsers with https://github.com/es-shims/es5-shim/blob/master/es5-shim.js"
				}
			]
		},
		"mixins": {
			"value": "A fresh look at Javascript mixins: http://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/",
			"popularity": 19
		},
		"rest": {
			"value": "\"How I Explained REST to my Wife\" http://tomayko.com/writings/rest-to-my-wife",
			"popularity": 2
		},
		"dom0": {
			"value": "The DOM 0 API was originally included by Netscape in 1995 with Netscape Navigator 2.0. It contained features such as collections and events, which were used to create primitive effects (e.g. form validation). The features that formed the DOM 0 API have become the foundation that forms the DOM today. For more, visit: (http://www.fortybelow.ca/Articles/DOM-0-Reference/).",
			"popularity": 19
		},
		"dom 0": {
			"alias": "dom0"
		},
		"raf": {
			"value": "For animations, requestAnimationFrame is far superior to setTimeout. http://paulirish.com/2011/requestanimationframe-for-smart-animating/ To cover older browsers, use this polyfill: https://gist.github.com/1579671",
			"popularity": 81,
			"editors": [
				"ljharb"
			]
		},
		"document tree": {
			"value": "A \"document tree\" is a live tree of nodes representing the current Web page. It is interfaced with via the DOM API.",
			"popularity": 6
		},
		"subtree": {
			"value": "A \"subtree\" is a subset of a document tree. See \"!document tree\" for more.",
			"popularity": 1
		},
		"documenttree": {
			"alias": "document tree"
		},
		"modifying prototypes": {
			"value": "Don't modify objects you don't own by extending native prototypes! http://www.nczonline.net/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/",
			"popularity": 2
		},
		"prototype modify": {
			"value": "Don't modify objects you don't own by extending native prototypes! http://www.nczonline.net/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/",
			"popularity": 0
		},
		"dog balls": {
			"value": "(function () {}()) > (function () {})() — http://www.youtube.com/watch?v=taaEzHI9xyY#t=34m33s (from YUIConf 2011)",
			"popularity": 18
		},
		"equals": {
			"alias": "comparisons",
			"popularity": 13
		},
		"functions": {
			"value": "See !fe vs fd",
			"popularity": 5
		},
		"ssjs": {
			"value": "Server-side JavaScript: Node.js and other V8 distributions (C++), Rhino (JVM), Spidermonkey (C).",
			"popularity": 13
		},
		"multi-browser": {
			"value": "\"Multi-browser\" is a word used to describe a resource that works in multiple browsers. Its definition is often used for the word \"cross-browser\", which has an entirely different meaning. See !cross-browser for details.",
			"popularity": 1
		},
		"templating": {
			"value": "\"You can get nice string formatting in a tweetful of characters, check out http://microjs.com/#templating for some nice options!\"",
			"popularity": 2
		},
		"help!": {
			"value": "Dont panic!",
			"popularity": 8
		},
		"onevent": {
			"value": "You should prefer using the DOM 2 addEventListener & removeEventListener methods to using the on<event name> property. See https://developer.mozilla.org/en/DOM/element.addEventListener#Why_use_addEventListener.3F",
			"popularity": 27
		},
		"bloat": {
			"value": "The solution to worrying about JS lib/framework size: include one less .jpg on your site. // https://twitter.com/paul_irish/status/227203681462927361 - also, https://twitter.com/trek/status/227082154109186049 http://fourword.fourkitchens.com/article/one-less-jpg",
			"popularity": 56,
			"editors": [
				"gkatsev",
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-08-14T00:18:30.751Z",
					"editor": "ljharb",
					"old-value": "The solution to worrying about JS lib/framework size: include one less .jpg on your site. // https://twitter.com/paul_irish/status/227203681462927361 - also, https://twitter.com/trek/status/227082154109186049 http://fourkitchens.com/blog/2013/04/24/one-less-jpg/",
					"new-value": "The solution to worrying about JS lib/framework size: include one less .jpg on your site. // https://twitter.com/paul_irish/status/227203681462927361 - also, https://twitter.com/trek/status/227082154109186049 http://fourword.fourkitchens.com/article/one-less-jpg"
				}
			]
		},
		"extend": {
			"value": "A simple and naive implementation of the extend functionality which can copy items from one object to another: https://gist.github.com/3162008 . A safe, non-destructive implementation that merges any number of objects: https://gist.github.com/3162033",
			"popularity": 24,
			"editors": [
				"Maxdamantus"
			],
			"changes": [
				{
					"date": "2014-07-20T08:59:37.789Z",
					"editor": "Maxdamantus",
					"old-value": "A simple and naive implementation of the extend functionality which can copy items from one object to another. https://gist.github.com/3162008. A safe, non-destructive implementation that merges any number of objects: https://gist.github.com/3162033",
					"new-value": "A simple and naive implementation of the extend functionality which can copy items from one object to another: https://gist.github.com/3162008 . A safe, non-destructive implementation that merges any number of objects: https://gist.github.com/3162033"
				}
			]
		},
		"yoda condition": {
			"value": "A Yoda Condition: if ('blue' === sky) … if blue the sky is.",
			"popularity": 6
		},
		"yoda": {
			"alias": "yoda condition",
			"popularity": 5
		},
		"horsemen": {
			"value": "The == operator is actually an overhead view of the Four Horsemen of the Apocalypse. see !equals",
			"popularity": 12
		},
		"cthuloop": {
			"alias": "cthuloops",
			"popularity": 4
		},
		"javascript url": {
			"value": "It's often advisable not to use inline javascript; including within the href of a link. If you want to achieve this, event handlers offer cleaner separation of markup and behavior, leading to easier maintenance. See !inline and !onevent",
			"popularity": 5
		},
		"ni!": {
			"value": "Do you demand a shrubbery?",
			"popularity": 2
		},
		">>>": {
			"alias": ">>",
			"popularity": 6
		},
		"v8>": {
			"alias": ">>",
			"popularity": 2
		},
		"sm>": {
			"alias": ">>",
			"popularity": 1
		},
		"for-in": {
			"alias": "for..in"
		},
		"for...in": {
			"alias": "for..in"
		},
		"hoist": {
			"value": "‘Hoisting’ is the name given to the mechanism whereby names defined with ‘var’ or function declarations (see !fe) are made available throughout their scope, even before the declaration is encountered textually.  Beware: though the *definition* of a variable is available, its value (if given) will be undefined until the var declaration is encountered or the variable is otherwise assigned to.",
			"popularity": 41,
			"editors": [
				"sacho",
				"Twey"
			]
		},
		"!>>": {
			"value": "To run code, use >> and sm> to execute on the Spidermonkey JS engine or >>> and v8> to execute on the v8 JS engine.",
			"popularity": 37,
			"editors": [
				"ImBcmDth"
			],
			"changes": [
				{
					"date": "2014-03-22T19:42:15.926Z",
					"editor": "ImBcmDth",
					"old-value": ">> and sm> run on the Spidermonkey JS engine. >>> and v8> run on the v8 JS engine.",
					"new-value": "To run code use >> and sm> run on the Spidermonkey JS engine. >>> and v8> run on the v8 JS engine.",
					"regex": "s/^/To run code use /"
				},
				{
					"date": "2014-03-22T19:42:31.684Z",
					"editor": "ImBcmDth",
					"old-value": "To run code use >> and sm> run on the Spidermonkey JS engine. >>> and v8> run on the v8 JS engine.",
					"new-value": "To run code, use >> and sm> run on the Spidermonkey JS engine. >>> and v8> run on the v8 JS engine.",
					"regex": "s/To run code use/To run code, use/"
				},
				{
					"date": "2014-03-22T19:43:09.881Z",
					"editor": "ImBcmDth",
					"old-value": "To run code, use >> and sm> run on the Spidermonkey JS engine. >>> and v8> run on the v8 JS engine.",
					"new-value": "To run code, use >> and sm> to run on the Spidermonkey JS engine. >>> and v8> run on the v8 JS engine.",
					"regex": "s/run on/to run on/"
				},
				{
					"date": "2014-03-22T19:43:27.681Z",
					"editor": "ImBcmDth",
					"old-value": "To run code, use >> and sm> to run on the Spidermonkey JS engine. >>> and v8> run on the v8 JS engine.",
					"new-value": "To run code, use >> and sm> to execute on the Spidermonkey JS engine. >>> and v8> run on the v8 JS engine.",
					"regex": "s/to run on/to execute on/"
				},
				{
					"date": "2014-03-22T19:43:43.917Z",
					"editor": "ImBcmDth",
					"old-value": "To run code, use >> and sm> to execute on the Spidermonkey JS engine. >>> and v8> run on the v8 JS engine.",
					"new-value": "To run code, use >> and sm> to execute on the Spidermonkey JS engine. >>> and v8> to execute on the v8 JS engine.",
					"regex": "s/run on/to execute on/"
				},
				{
					"date": "2014-03-22T19:44:10.699Z",
					"editor": "ImBcmDth",
					"old-value": "To run code, use >> and sm> to execute on the Spidermonkey JS engine. >>> and v8> to execute on the v8 JS engine.",
					"new-value": "To run code, use >> and sm> to execute on the Spidermonkey JS engine or >>> and v8> to execute on the v8 JS engine.",
					"regex": "s/engine./engine or/"
				}
			]
		},
		"!>>>": {
			"alias": "!>>",
			"popularity": 1
		},
		"!v8>": {
			"alias": "!>>"
		},
		"!sm>": {
			"alias": "!>>"
		},
		"es6": {
			"value": "The next version of JavaScript, slated for completion in late 2013. For ES6 features see http://wiki.ecmascript.org/doku.php?id=harmony:proposals. To experiment with ES6 now see http://benvie.github.com/continuum. For availability in browsers see http://kangax.github.com/es5-compat-table/es6",
			"popularity": 21,
			"editors": [
				"Benvie"
			]
		},
		"concat": {
			"value": "For two JS programs A and B the safe way to concatenate them is A + \"\\n;\" + B. This resolves all possible syntax issues (and both the newline and the semicolon are required to do so), however there still can be semantic collisions, e.g. between same-named functions in the top scope, strict mode declarations, etc.",
			"popularity": 8,
			"editors": [
				"inimino"
			]
		},
		"try it and see why don'tcha": {
			"alias": "tias"
		},
		"try it and see why dontcha": {
			"alias": "tias"
		},
		"last value": {
			"alias": "last one only",
			"popularity": 1
		},
		"regex html": {
			"value": "http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454",
			"popularity": 14
		},
		"coffeescript scoping": {
			"value": "The Problem with Implicit Scoping in CoffeeScript: http://lucumr.pocoo.org/2011/12/22/implicit-scoping-in-coffeescript/",
			"popularity": 4
		},
		"prototypal intro": {
			"alias": "prototype intro"
		},
		"try these": {
			"alias": "shoo"
		},
		"defaults": {
			"alias": "default"
		},
		"quick fix": {
			"value": "Quick code doesn't do you any favours. You'll just get stuck on the next step if you have no understanding.",
			"popularity": 0
		},
		"quick code": {
			"alias": "quick fix"
		},
		"cats": {
			"value": "http://jsforcats.com/",
			"popularity": 4
		},
		"ded": {
			"alias": "shoo",
			"popularity": 156
		},
		"dedicated": {
			"alias": "shoo",
			"popularity": 2
		},
		"method": {
			"value": "a method is a function associated with an object. i.e., a function that interacts and uses the object it is associated with.",
			"popularity": 13
		},
		"arguments": {
			"value": "in Javascript, functions are variadic. They can accept any number of arguments using the arguments object. <http://en.wikipedia.org/wiki/Variadic_function> <http://mdn.io/arguments>",
			"popularity": 9,
			"editors": [
				"j201"
			]
		},
		"webconsole": {
			"value": "The built-in \"Web Console\" in Firefox shows errors & allows you to enter javascript snippets for evaluations. You can open it with 'Ctrl+Shift+K'.",
			"popularity": 5
		},
		"document.all": {
			"value": "document.all is a remnant from the DOM stone-age and should not be used, mostly because it is unreliable. Use document.getElementById instead.",
			"popularity": 7
		},
		"freelance": {
			"alias": "jobs"
		},
		"learn-css": {
			"value": "Learn CSS, https://developer.mozilla.org/en-US/learn/css for more CSS specific stuff there's #css",
			"popularity": 0
		},
		"cookie": {
			"value": "om nom nom. <3",
			"popularity": 9
		},
		"i love you": {
			"value": "I love you too. <3",
			"popularity": 7
		},
		"<3": {
			"alias": "i love you",
			"popularity": 1
		},
		"hipsters": {
			"value": "hipsters use <!-- --> for all their javascript comments. JS: The Hip Parts: https://gist.github.com/3374141",
			"popularity": 1
		},
		"array-like": {
			"value": "An array-like object is an object with a property `length`, and (possibly) numeric properties 0..`length` holding values of the array-like. You can use Array.prototype.slice to convert an array-like to a proper array.",
			"popularity": 10,
			"editors": [
				"Mortchek"
			]
		},
		"lance": {
			"value": "try #js-lance and #css-lance",
			"popularity": 13
		},
		"paste live": {
			"value": "Paste links, not code. Sites like http://jsfiddle.net/ , http://jsbin.com/ , and http://www.webdevout.net/test let people easily run your code.",
			"popularity": 1
		},
		"queryselector": {
			"value": "Please, use a querySelector engine for querying the DOM. Newer engines will get querySelector and querySelectorAll by default. You can use Sizzle, NWMatcher, Qwery or some other library to get it in older browsers.",
			"popularity": 2
		},
		"love": {
			"alias": "i love you",
			"popularity": 3
		},
		"cthuloops": {
			"value": "I give you, a cthuloop: for (;;) { } … FOR CTHULU",
			"popularity": 13
		},
		"cthulu": {
			"alias": "cthuloops"
		},
		"books": {
			"value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus",
			"popularity": 468,
			"creator": "gkatsev",
			"editors": [
				"gkatsev",
				"hemanth",
				"FireFly",
				"eboy",
				"_hemanth_",
				"Sorella",
				"dwcook",
				"ericelliott",
				"ashnur",
				"Agamemnus",
				"ljharb",
				"therealklanni"
			],
			"changes": [
				{
					"date": "2013-12-21T07:51:39.523Z",
					"editor": "Agamemnus",
					"old-value": "!eloquent (http://eloquentjavascript.net), The Good Parts by Douglas Crockford, JS Patterns by Stoyan Stefanov, JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus.",
					"new-value": "!eloquent (http://eloquentjavascript.net), High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus."
				},
				{
					"date": "2014-02-26T05:06:49.177Z",
					"editor": "Agamemnus",
					"old-value": "!eloquent (http://eloquentjavascript.net), High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus.",
					"new-value": "\"Programming JavaScript Applications\" by Eric Elliott, eloquent (http://eloquentjavascript.net), \"High Performance JavaScript\" by Nicholas C. Zakas, \"Effective JavaScript\" by David Herman, \"Functional JavaScript\" by Michael Fogus"
				},
				{
					"date": "2014-03-06T01:29:59.647Z",
					"editor": "gkatsev",
					"old-value": "\"Programming JavaScript Applications\" by Eric Elliott, eloquent (http://eloquentjavascript.net), \"High Performance JavaScript\" by Nicholas C. Zakas, \"Effective JavaScript\" by David Herman, \"Functional JavaScript\" by Michael Fogus",
					"new-value": "!eloquent (http://eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus."
				},
				{
					"date": "2014-03-08T23:39:20.367Z",
					"editor": "Agamemnus",
					"old-value": "!eloquent (http://eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus.",
					"new-value": "!eloquent (eloquentjavascript.net), Programming JavaScript Applications by Eric Elliott, JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional"
				},
				{
					"date": "2014-03-08T23:56:01.260Z",
					"editor": "gkatsev",
					"old-value": "!eloquent (eloquentjavascript.net), Programming JavaScript Applications by Eric Elliott, JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional",
					"new-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus"
				},
				{
					"date": "2014-04-01T06:51:36.284Z",
					"editor": "Agamemnus",
					"old-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus",
					"new-value": "!codecombat.com, eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus"
				},
				{
					"date": "2014-04-01T06:55:22.401Z",
					"editor": "Agamemnus",
					"old-value": "!codecombat.com, eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus",
					"new-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus ... see interactives for more ways to learn Javascript!"
				},
				{
					"date": "2014-04-01T06:55:33.058Z",
					"editor": "Agamemnus",
					"old-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus ... see interactives for more ways to learn Javascript!",
					"new-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus ... see \"interactives\" for more ways to learn Javascript!"
				},
				{
					"date": "2014-04-01T06:56:57.392Z",
					"editor": "ljharb",
					"old-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus ... see \"interactives\" for more ways to learn Javascript!",
					"new-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus … see !interactives for more ways to learn Javascript!"
				},
				{
					"date": "2014-04-01T06:57:01.332Z",
					"editor": "ljharb",
					"old-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus … see !interactives for more ways to learn Javascript!",
					"new-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus … see !interactives for more ways to learn JavaScript!"
				},
				{
					"date": "2014-04-01T13:49:58.324Z",
					"editor": "gkatsev",
					"old-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus … see !interactives for more ways to learn JavaScript!",
					"new-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus ",
					"regex": "s/… see !interactives for more ways to learn JavaScript!//"
				},
				{
					"date": "2014-04-02T04:24:01.929Z",
					"editor": "Agamemnus",
					"old-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus ",
					"new-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus ... also see: \"interactives\"."
				},
				{
					"date": "2014-04-02T04:25:03.872Z",
					"editor": "therealklanni",
					"old-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus ... also see: \"interactives\".",
					"new-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus ... also see !interactives"
				},
				{
					"date": "2014-06-04T12:37:34.899Z",
					"editor": "ljharb",
					"old-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus ... also see !interactives",
					"new-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus, The Good Parts by Douglas Crockford ... also see !interactives"
				},
				{
					"date": "2014-09-20T07:15:16.935Z",
					"editor": "gkatsev",
					"old-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus, The Good Parts by Douglas Crockford ... also see !interactives",
					"new-value": "!eloquent (eloquentjavascript.net), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus"
				}
			]
		},
		"dogballs": {
			"alias": "dog balls",
			"popularity": 5
		},
		"clientside": {
			"value": "Client-side rendering can be slow. Give a try to last decade's newest technology, server-side rendering! http://engineering.twitter.com/2012/05/improving-performance-on-twittercom.html",
			"popularity": 6,
			"creator": "ljharb",
			"editors": []
		},
		"typing": {
			"value": "A good read on static versus dynamic typing: https://sites.google.com/site/steveyegge2/is-weak-typing-strong-enough",
			"popularity": 1,
			"creator": "ljharb",
			"editors": []
		},
		"dynamic": {
			"alias": "typing"
		},
		"static": {
			"alias": "typing",
			"popularity": 1
		},
		"max value": {
			"value": ">>for(a=Number.MAX_VALUE,i=b=\"\",c=[],e=0,f=Math.floor,g=Math.pow(2,49),h=8*g*g,a=f(0>a?(i=\"-\",-a):a);a>=h;a/=g)c[e++]=0;for(;a>=g;a=d)d=f(a/g),c[e++]=a-d*g;for(c[e++]=a;e;){d=0;for(h=e;h--;)a=c[h]+d*g,(c[h]=f(a/10))||h+1<e||--e,d=a%10;b=d+b}i+b ",
			"popularity": 15,
			"creator": "very",
			"editors": [
				"very",
				"nowlan"
			]
		},
		"typescript": {
			"value": "TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. http://www.typescriptlang.org/",
			"popularity": 11,
			"creator": "ljharb",
			"editors": [
				"niggler",
				"ljharb_work",
				"havvy",
				"ckknight"
			]
		},
		"nophp": {
			"value": "Just say no to PHP!",
			"popularity": 3,
			"creator": "gkatsev",
			"editors": [
				"gkatsev"
			]
		},
		"curry": {
			"value": "Partial Application in JavaScript <http://benalman.com/news/2012/09/partial-application-in-javascript/>",
			"popularity": 14,
			"creator": "gkatsev",
			"editors": []
		},
		"partial application": {
			"alias": "curry"
		},
		"java": {
			"value": "Remember, Java is to JavaScript as Pain is to Painting, or Ham is to Hamster. We don't know Java, and if you're trying to apply your Java knowledge to JavaScript, it probably won't work. Try ##java",
			"popularity": 102,
			"creator": "ljharb",
			"editors": [
				"eboy",
				"niggler",
				"ljharb",
				"Sorella"
			],
			"changes": [
				{
					"date": "2014-01-19T22:36:45.840Z",
					"editor": "Sorella",
					"old-value": "Remember, Java is to JavaScript as Pain is to Painting, or Ham is to Hamster. We don't know Java, and if you're trying to apply your Java knowledge to JavaScript, it probably won't work. Try #java",
					"new-value": "Remember, Java is to JavaScript as Pain is to Painting, or Ham is to Hamster. We don't know Java, and if you're trying to apply your Java knowledge to JavaScript, it probably won't work. Try ##java",
					"regex": "s/#java/##java/"
				}
			]
		},
		"</script>": {
			"value": "If you have an embedded <script> element with JavaScript code inside, watch out for having \"</script>\" embedded inside a string--it'll pre-emptively end the script tag since the HTML parser doesn't care about it being inside a string. To avoid this, put your scripts at their own locations and then use the script element's src attribute to refer to them.",
			"popularity": 3,
			"creator": "FireFly",
			"editors": [
				"dwcook"
			]
		},
		"promises": {
			"value": "Promises are placeholders for values that are not yet available, and allow one to regain compositionality for asynchronous operations in JavaScript (so you can do things like `var x = foo(bar(y))`, where `foo` and `bar` are asynchronous operations). See: https://gist.github.com/domenic/3889970, https://blog.jcoglan.com/?p=1609 (contrast with !cps)",
			"popularity": 55,
			"creator": "ljharb",
			"editors": [
				"ljharb",
				"Agamemnus",
				"GreenJello",
				"Sorella",
				"deltab"
			],
			"changes": [
				{
					"date": "2014-05-14T05:50:33.981Z",
					"editor": "ljharb",
					"old-value": "You're missing the point of promises: \"The point of promises is to give us back functional composition and error bubbling in the async world.\" https://gist.github.com/3889970",
					"new-value": "What are promises, and why should I use them? https://github.com/petkaantonov/bluebird#what-are-promises-and-why-should-i-use-them"
				},
				{
					"date": "2014-06-10T23:12:48.998Z",
					"editor": "Agamemnus",
					"old-value": "What are promises, and why should I use them? https://github.com/petkaantonov/bluebird#what-are-promises-and-why-should-i-use-them",
					"new-value": "Promises are saved AJAX calls."
				},
				{
					"date": "2014-07-13T01:53:34.746Z",
					"editor": "ljharb",
					"old-value": "Promises are saved AJAX calls.",
					"new-value": "What are promises, and why should I use them? https://github.com/petkaantonov/bluebird#what-are-promises-and-why-should-i-use-them"
				},
				{
					"date": "2014-07-14T02:31:04.439Z",
					"editor": "Agamemnus",
					"old-value": "What are promises, and why should I use them? https://github.com/petkaantonov/bluebird#what-are-promises-and-why-should-i-use-them",
					"new-value": "JUST DELAYED AJAX CALLS. PROVE ME WRONG MOUAHAHAHAHA"
				},
				{
					"date": "2014-07-14T02:32:17.225Z",
					"editor": "GreenJello",
					"old-value": "JUST DELAYED AJAX CALLS. PROVE ME WRONG MOUAHAHAHAHA",
					"new-value": "What are promises, and why should I use them? https://github.com/petkaantonov/bluebird#what-are-promises-and-why-should-i-use-them"
				},
				{
					"date": "2014-07-14T02:32:33.318Z",
					"editor": "Sorella",
					"old-value": "What are promises, and why should I use them? https://github.com/petkaantonov/bluebird#what-are-promises-and-why-should-i-use-them",
					"new-value": "What are promises, and why should I use them? https://github.com/petkaantonov/bluebird#what-are-promises-and-why-should-i-use-them"
				},
				{
					"date": "2014-07-14T02:39:43.981Z",
					"editor": "Sorella",
					"old-value": "What are promises, and why should I use them? https://github.com/petkaantonov/bluebird#what-are-promises-and-why-should-i-use-them",
					"new-value": "Promises are placeholder for values, and allow one to regain compositionality for asynchronous operations in JavaScript (so you can do things like `var x = foo(bar(y))`, where `foo` and `bar` are asynchronous operations). See: https://gist.github.com/domenic/3889970, https://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/, and http://robotlolita.me/2014/03/20/a-monad"
				},
				{
					"date": "2014-07-14T02:40:00.259Z",
					"editor": "Sorella",
					"old-value": "Promises are placeholder for values, and allow one to regain compositionality for asynchronous operations in JavaScript (so you can do things like `var x = foo(bar(y))`, where `foo` and `bar` are asynchronous operations). See: https://gist.github.com/domenic/3889970, https://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/, and http://robotlolita.me/2014/03/20/a-monad",
					"new-value": "Promises are placeholder for values, and allow one to regain compositionality for asynchronous operations in JavaScript (so you can do things like `var x = foo(bar(y))`, where `foo` and `bar` are asynchronous operations). See: https://gist.github.com/domenic/3889970, https://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/"
				},
				{
					"date": "2014-07-14T02:40:53.445Z",
					"editor": "Sorella",
					"old-value": "Promises are placeholder for values, and allow one to regain compositionality for asynchronous operations in JavaScript (so you can do things like `var x = foo(bar(y))`, where `foo` and `bar` are asynchronous operations). See: https://gist.github.com/domenic/3889970, https://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/",
					"new-value": "Promises are placeholder for values, and allow one to regain compositionality for asynchronous operations in JavaScript (so you can do things like `var x = foo(bar(y))`, where `foo` and `bar` are asynchronous operations). See: https://gist.github.com/domenic/3889970, https://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/ (see also !cps)"
				},
				{
					"date": "2014-07-14T02:44:01.111Z",
					"editor": "GreenJello",
					"old-value": "Promises are placeholder for values, and allow one to regain compositionality for asynchronous operations in JavaScript (so you can do things like `var x = foo(bar(y))`, where `foo` and `bar` are asynchronous operations). See: https://gist.github.com/domenic/3889970, https://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/ (see also !cps)",
					"new-value": "Promises are placeholder for values, and allow one to regain compositionality for asynchronous operations in JavaScript (so you can do things like `var x = foo(bar(y))`, where `foo` and `bar` are asynchronous operations). See: https://gist.github.com/domenic/3889970, https://blog.jcoglan.com/?p=1609 (see also !cps)"
				},
				{
					"date": "2014-07-27T22:13:20.343Z",
					"editor": "Sorella",
					"old-value": "Promises are placeholder for values, and allow one to regain compositionality for asynchronous operations in JavaScript (so you can do things like `var x = foo(bar(y))`, where `foo` and `bar` are asynchronous operations). See: https://gist.github.com/domenic/3889970, https://blog.jcoglan.com/?p=1609 (see also !cps)",
					"new-value": "Promises are placeholder for values, and allow one to regain compositionality for asynchronous operations in JavaScript (so you can do things like `var x = foo(bar(y))`, where `foo` and `bar` are asynchronous operations). See: https://gist.github.com/domenic/3889970, https://blog.jcoglan.com/?p=1609 (contrast with !cps)",
					"regex": "s/see also !cps/contrast with !cps/"
				},
				{
					"date": "2014-07-27T22:14:52.087Z",
					"editor": "Sorella",
					"old-value": "Promises are placeholder for values, and allow one to regain compositionality for asynchronous operations in JavaScript (so you can do things like `var x = foo(bar(y))`, where `foo` and `bar` are asynchronous operations). See: https://gist.github.com/domenic/3889970, https://blog.jcoglan.com/?p=1609 (contrast with !cps)",
					"new-value": "Promises are placeholder for values that are not yet available, and allow one to regain compositionality for asynchronous operations in JavaScript (so you can do things like `var x = foo(bar(y))`, where `foo` and `bar` are asynchronous operations). See: https://gist.github.com/domenic/3889970, https://blog.jcoglan.com/?p=1609 (contrast with !cps)",
					"regex": "s/for values/for values that are not yet available/"
				},
				{
					"date": "2014-07-27T22:15:42.692Z",
					"editor": "deltab",
					"old-value": "Promises are placeholder for values that are not yet available, and allow one to regain compositionality for asynchronous operations in JavaScript (so you can do things like `var x = foo(bar(y))`, where `foo` and `bar` are asynchronous operations). See: https://gist.github.com/domenic/3889970, https://blog.jcoglan.com/?p=1609 (contrast with !cps)",
					"new-value": "Promises are placeholders for values that are not yet available, and allow one to regain compositionality for asynchronous operations in JavaScript (so you can do things like `var x = foo(bar(y))`, where `foo` and `bar` are asynchronous operations). See: https://gist.github.com/domenic/3889970, https://blog.jcoglan.com/?p=1609 (contrast with !cps)",
					"regex": "s/holder/holders/"
				}
			]
		},
		"tco": {
			"value": "http://wiki.ecmascript.org/doku.php?id=harmony:proper_tail_calls https://gist.github.com/1697037",
			"popularity": 2,
			"creator": "FireFly",
			"editors": []
		},
		"equality table": {
			"value": "JavaScript Equality Table: https://janosch.woschitz.org/javascript-equality-comparison/",
			"popularity": 4,
			"creator": "CoverSlide|TPFR",
			"editors": [
				"CoverSlide|TPFR"
			]
		},
		"bracket notation": {
			"alias": "bracket access"
		},
		"pebkac": {
			"value": "Problem Exists Between Keyboard And Chair",
			"popularity": 4,
			"creator": "sukima",
			"editors": [
				"niggler",
				"sukima"
			]
		},
		"d3": {
			"value": "D3.js is a JavaScript library for manipulating documents based on data. http://d3js.org/",
			"popularity": 1,
			"creator": "sukima",
			"editors": []
		},
		"jsbin": {
			"alias": "paste",
			"popularity": 3
		},
		"iff": {
			"value": "If and only if. \"a if and only if b\" is the same as \"a if b and b if a\". http://en.wikipedia.org/wiki/If_and_only_if",
			"popularity": 3,
			"creator": "sukima",
			"editors": [
				"jrajav",
				"sukima"
			]
		},
		"oauth2": {
			"value": "Consider carefully before choosing to use Oauth2. http://hueniverse.com/2012/07/oauth-2-0-and-the-road-to-hell/",
			"popularity": 1,
			"creator": "ljharb",
			"editors": []
		},
		"oauth": {
			"alias": "oauth2",
			"popularity": 1
		},
		"hashbang": {
			"value": "Google proposed a hashbang (#!) URL scheme in 2009: http://googlewebmastercentral.blogspot.com/2009/10/proposal-for-making-ajax-crawlable.html Now that pushState is available in modern browsers, it is strongly encouraged over hashbang URLs.",
			"popularity": 1,
			"creator": "ljharb",
			"editors": []
		},
		"pyramid": {
			"value": "Pyramid of Doom: A coding style that uses several levels of anonymous functions creating a pyramid like structure in the indented whitespace when viewed on it's side. http://tritarget.org/blog/2012/11/28/the-pyramid-of-doom-a-javascript-style-trap/",
			"popularity": 6,
			"creator": "sukima",
			"editors": []
		},
		"miller": {
			"value": "The Miller device is a method of determining whether a value is an array. The Miller Device: Object.prototype.toString.call(obj) == '[object Array]'; This works for ES3 and ES5, although for ES5 it is recommended to use the Array.isArray method",
			"popularity": 1,
			"creator": "CoverSlide",
			"editors": [
				"Mortchek"
			]
		},
		"miller-device": {
			"alias": "miller"
		},
		"isarray": {
			"alias": "miller"
		},
		"lastoneonly": {
			"value": "Javascript closures in for-loops http://www.mennovanslooten.nl/blog/post/62",
			"popularity": 21,
			"creator": "NoiseEee",
			"editors": []
		},
		"caps": {
			"value": "stop resting your coffee mug on shift.  it damages your keyboard",
			"popularity": 2,
			"creator": "hughfdjackson",
			"editors": []
		},
		"sod off": {
			"alias": "shoo"
		},
		"unobtrusive": {
			"value": "http://en.wikipedia.org/wiki/Unobtrusive_JavaScript",
			"popularity": 2,
			"creator": "misterhat",
			"editors": []
		},
		"constructor": {
			"value": "Constructors considered mildly confusing. http://joost.zeekat.nl/constructors-considered-mildly-confusing.html",
			"popularity": 22,
			"editors": [
				"gkatsev"
			]
		},
		"constructors": {
			"alias": "constructor"
		},
		"vanillajs": {
			"value": "The most lightweight JavaScript framework out there: http://vanilla-js.com/",
			"popularity": 7,
			"creator": "CoverSlide",
			"editors": []
		},
		"vanilla": {
			"alias": "vanillajs",
			"popularity": 4
		},
		"bot": {
			"value": "I'm a bot!",
			"popularity": 34,
			"creator": "lilmonkey",
			"editors": []
		},
		"@": {
			"value": "!<handler> @<user>",
			"popularity": 4,
			"creator": "hemanth_",
			"editors": []
		},
		"sop": {
			"value": "https://developer.mozilla.org/en-US/docs/JavaScript/Same_origin_policy_for_JavaScript",
			"popularity": 8,
			"creator": "mistertwig",
			"editors": []
		},
		"same origin policy": {
			"alias": "sop"
		},
		"jswiki": {
			"value": "This wiki indexes libraries and resources available for JavaScript. In addition it provides some starting points for newbies in form of Beginner's Resources.  https://github.com/bebraw/jswiki/wiki",
			"popularity": 1,
			"creator": "mikef",
			"editors": []
		},
		"classes": {
			"value": "Class hierarchies? Don't do that! http://raganwald.com/2014/03/31/class-hierarchies-dont-do-that.html (See also, !inheritance)",
			"popularity": 83,
			"creator": "flebron",
			"editors": [
				"Benvie",
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-04-06T06:45:08.193Z",
					"editor": "ljharb",
					"old-value": "JavaScript does not have class-based inheritance. Instead, it has constructor functions which initialize newly created objects that are linked to the constructor's prototype. These instances point to the prototype and use it for fallback property lookup.",
					"new-value": "Class hierarchies? Don't do that! http://raganwald.com/2014/03/31/class-hierarchies-dont-do-that.html (See also, !inheritance)"
				},
				{
					"date": "2014-04-06T06:45:27.481Z",
					"editor": "ljharb",
					"old-value": "Class hierarchies? Don't do that! http://raganwald.com/2014/03/31/class-hierarchies-dont-do-that.html (See also, !inheritance)",
					"new-value": "JavaScript does not have class-based inheritance. Instead, it has constructor functions which initialize newly created objects that are linked to the constructor's prototype. These instances point to the prototype and use it for fallback property lookup."
				},
				{
					"date": "2014-04-06T06:46:07.889Z",
					"editor": "ljharb",
					"old-value": "JavaScript does not have class-based inheritance. Instead, it has constructor functions which initialize newly created objects that are linked to the constructor's prototype. These instances point to the prototype and use it for fallback property lookup.",
					"new-value": "Class hierarchies? Don't do that! http://raganwald.com/2014/03/31/class-hierarchies-dont-do-that.html (See also, !inheritance)"
				}
			]
		},
		"jobs": {
			"value": "##javascript is not a jobs forum.  Check out #css-lance for work",
			"popularity": 11,
			"creator": "niggler",
			"editors": [
				"niggler"
			]
		},
		"contract": {
			"alias": "jobs"
		},
		"continuum": {
			"value": "A next-generation JavaScript (ES6) virtual machine written in last-generation JavaScript (ES3) http://benvie.github.com/continuum",
			"popularity": 2,
			"creator": "Benvie",
			"editors": []
		},
		"hamster": {
			"value": "Java is to Javascript like ham is to hamster.",
			"popularity": 3,
			"creator": "ljharb",
			"editors": []
		},
		"setinterval": {
			"value": "Avoid setInterval; use setTimeout instead. http://zetafleet.com/blog/why-i-consider-setinterval-harmful",
			"popularity": 68,
			"creator": "ljharb",
			"editors": []
		},
		"book": {
			"alias": "books",
			"popularity": 15
		},
		"copy": {
			"value": "\"Shallow copy\" means to copy all the properties over from the source object to the new object.  \"Deep copy\" recursively performs the same to all properties with object values. Illustrations: https://gist.github.com/4644248",
			"popularity": 7,
			"creator": "FireFly",
			"editors": [
				"FireFly"
			]
		},
		"doesnt work": {
			"alias": "doesn't work",
			"popularity": 1
		},
		"dedicated channels": {
			"alias": "shoo"
		},
		"axe": {
			"value": "Doned axe to axe or if eniwon iz heer or a hive or yous's sumding. Jos axe yor westen an lets get mowen a lawn, k? Fanks.",
			"popularity": 5,
			"creator": "CoverSlide",
			"editors": []
		},
		"videotestcase": {
			"value": "A video testcase is a minimal viewable video exhibiting your problem. \"Minimal\" means just the bare essentials required to illustrate your problem. Please record a video testcase at http://www.youtube.com to help us assist you.",
			"popularity": 0,
			"creator": "eboy",
			"editors": []
		},
		"nashorn": {
			"value": "Nashorn is an upcoming JavaScript engine created by Oracle and programmed in Java. http://en.wikipedia.org/wiki/Nashorn_(JavaScript_engine)",
			"popularity": 0,
			"creator": "Benvie",
			"editors": []
		},
		"beer": {
			"value": "Don't mind if I do! Glug glug glug!",
			"popularity": 9,
			"creator": "CoverSlide",
			"editors": []
		},
		"stop": {
			"value": "hammer time",
			"popularity": 7,
			"creator": "eboy",
			"editors": [
				"Maxdamantus"
			],
			"changes": [
				{
					"date": "2014-09-17T14:56:56.845Z",
					"editor": "Maxdamantus",
					"old-value": "collaborate and listen",
					"new-value": "hammer time"
				}
			]
		},
		"module patterns": {
			"alias": "module pattern"
		},
		"tldr": {
			"value": "too many concerns. Modularize, simplify, remove the cruft. See !modularising",
			"popularity": 4,
			"creator": "pachet",
			"editors": [
				"pachet",
				"sukima",
				"Mortchek",
				"Sorella",
				"niggler"
			]
		},
		"modularising": {
			"value": "The code is difficult to read or follow. When writing code consider modularizing, simplifying, and/or extracting unneeded code. Narrowing down to the actual problem will greatly increase your chances of getting constructive feedback.",
			"popularity": 5,
			"creator": "Sorella",
			"editors": []
		},
		"jsurl": {
			"alias": "javascript url"
		},
		"thanks": {
			"value": "Don't thank me, I'm just a bot! You're welcome, nevertheless.",
			"popularity": 7,
			"creator": "eboy",
			"editors": [
				"eboy"
			]
		},
		"vanilla-js": {
			"alias": "vanillajs",
			"popularity": 1
		},
		"vanilla js": {
			"alias": "vanillajs",
			"popularity": 2
		},
		"test case": {
			"alias": "testcase",
			"popularity": 11
		},
		"lastone": {
			"alias": "last one only"
		},
		"shipit": {
			"value": "http://shipitsquirrel.github.com/",
			"popularity": 1,
			"creator": "gkatsev",
			"editors": []
		},
		"html regex": {
			"value": "'How can I parse HTML/XHTML/XML with regular expressions? http://stackoverflow.com/a/1732454/632724'",
			"popularity": 13,
			"creator": "ljharb",
			"editors": [
				"ljharb"
			]
		},
		"float": {
			"value": "Confused by why 0.1+0.2 is not 0.3? In base-10 0.1 is simple, but in base-2, it's not. See http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html and http://floating-point-gui.de/",
			"popularity": 16,
			"creator": "systemfault",
			"editors": [
				"Gregor",
				"ljharb",
				"gkatsev"
			],
			"changes": [
				{
					"date": "2014-04-16T18:51:43.364Z",
					"editor": "ljharb",
					"old-value": "Confused by why 0.1+0.2 is not 0.3? In base-10 0.1 is simple, but in base-2, it's not. Consider a base-10 system with only three decimal places: 1/3 is represented as 0.333, even though that's imprecise. Add 1/3 to 1/3 and we get 0.666, which isn't exactly 1/6. Add another 1/3 and we get 0.999, which isn't exactly 1. In base-2, 0.1 is hard to represent, but 0.5 is easy. See http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html",
					"new-value": "Confused by why 0.1+0.2 is not 0.3? In base-10 0.1 is simple, but in base-2, it's not. Consider a base-10 system with only three decimal places: 1/3 is represented as 0.333, even though that's imprecise. Add 1/3 to 1/3 and we get 0.666, which isn't exactly 1/6. Add another 1/3 and we get 0.999, which isn't exactly 1. In base-2, 0.1 is hard to represent, but 0.5 is easy. See http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html and "
				},
				{
					"date": "2014-04-16T18:52:02.532Z",
					"editor": "ljharb",
					"old-value": "Confused by why 0.1+0.2 is not 0.3? In base-10 0.1 is simple, but in base-2, it's not. Consider a base-10 system with only three decimal places: 1/3 is represented as 0.333, even though that's imprecise. Add 1/3 to 1/3 and we get 0.666, which isn't exactly 1/6. Add another 1/3 and we get 0.999, which isn't exactly 1. In base-2, 0.1 is hard to represent, but 0.5 is easy. See http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html and ",
					"new-value": "Confused by why 0.1+0.2 is not 0.3? In base-10 0.1 is simple, but in base-2, it's not. Consider a base-10 system with only three decimal places: 1/3 is represented as 0.333, even though that's imprecise. Add 1/3 to 1/3 and we get 0.666, which isn't exactly 1/6. Add another 1/3 and we get 0.999, which isn't exactly 1. In base-2, 0.1 is hard to represent, but 0.5 is easy. See http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html and "
				},
				{
					"date": "2014-04-16T18:52:12.424Z",
					"editor": "ljharb",
					"old-value": "Confused by why 0.1+0.2 is not 0.3? In base-10 0.1 is simple, but in base-2, it's not. Consider a base-10 system with only three decimal places: 1/3 is represented as 0.333, even though that's imprecise. Add 1/3 to 1/3 and we get 0.666, which isn't exactly 1/6. Add another 1/3 and we get 0.999, which isn't exactly 1. In base-2, 0.1 is hard to represent, but 0.5 is easy. See http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html and ",
					"new-value": "Confused by why 0.1+0.2 is not 0.3? In base-10 0.1 is simple, but in base-2, it's not. Consider a base-10 system with only three decimal places: 1/3 is represented as 0.333, even though that's imprecise. Add 1/3 to 1/3 and we get 0.666, which isn't exactly 1/6. Add another 1/3 and we get 0.999, which isn't exactly 1. In base-2, 0.1 is hard to represent, but 0.5 is easy. See http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html"
				},
				{
					"date": "2014-04-16T18:52:29.095Z",
					"editor": "ljharb",
					"old-value": "Confused by why 0.1+0.2 is not 0.3? In base-10 0.1 is simple, but in base-2, it's not. Consider a base-10 system with only three decimal places: 1/3 is represented as 0.333, even though that's imprecise. Add 1/3 to 1/3 and we get 0.666, which isn't exactly 1/6. Add another 1/3 and we get 0.999, which isn't exactly 1. In base-2, 0.1 is hard to represent, but 0.5 is easy. See http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html",
					"new-value": "Confused by why 0.1+0.2 is not 0.3? In base-10 0.1 is simple, but in base-2, it's not. Consider a base-10 system with only three decimal places: 1/3 is represented as 0.333, even though that's imprecise. Add 1/3 to 1/3 and we get 0.666, which isn't exactly 1/6. Add another 1/3 and we get 0.999, which isn't exactly 1. In base-2, 0.1 is hard to represent, but 0.5 is easy. See http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html and"
				},
				{
					"date": "2014-04-16T18:58:44.441Z",
					"editor": "gkatsev",
					"old-value": "Confused by why 0.1+0.2 is not 0.3? In base-10 0.1 is simple, but in base-2, it's not. Consider a base-10 system with only three decimal places: 1/3 is represented as 0.333, even though that's imprecise. Add 1/3 to 1/3 and we get 0.666, which isn't exactly 1/6. Add another 1/3 and we get 0.999, which isn't exactly 1. In base-2, 0.1 is hard to represent, but 0.5 is easy. See http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html and",
					"new-value": "Confused by why 0.1+0.2 is not 0.3? In base-10 0.1 is simple, but in base-2, it's not. Consider a base-10 system with only three decimal places: 1/3 is represented as 0.333, even though that's imprecise. Add 1/3 to 1/3 and we get 0.666, which isn't exactly 1/6. Add another 1/3 and we get 0.999, which isn't exactly 1. In base-2, 0.1 is hard to represent, but 0.5 is easy. See http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html andhttp\\://floating-point-gui.de/",
					"regex": "s/$/http\\:\\/\\/floating-point-gui.de\\//"
				},
				{
					"date": "2014-04-16T19:01:03.681Z",
					"editor": "gkatsev",
					"old-value": "Confused by why 0.1+0.2 is not 0.3? In base-10 0.1 is simple, but in base-2, it's not. Consider a base-10 system with only three decimal places: 1/3 is represented as 0.333, even though that's imprecise. Add 1/3 to 1/3 and we get 0.666, which isn't exactly 1/6. Add another 1/3 and we get 0.999, which isn't exactly 1. In base-2, 0.1 is hard to represent, but 0.5 is easy. See http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html andhttp\\://floating-point-gui.de/",
					"new-value": "Confused by why 0.1+0.2 is not 0.3? In base-10 0.1 is simple, but in base-2, it's not. See http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html and http://floating-point-gui.de/"
				}
			]
		},
		"performance matters": {
			"value": "Performance only matters when it's built, working, measured, and THEN found to be slow.",
			"popularity": 0,
			"creator": "ljharb",
			"editors": []
		},
		"subclass arrays": {
			"value": "You can't subclass Array in javascript: http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/",
			"popularity": 7,
			"creator": "ljharb",
			"editors": []
		},
		"array mutators": {
			"value": "Array mutator methods: push, pop, unshift, shift, splice, reverse, sort. https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array#Mutator_methods",
			"popularity": 11,
			"creator": "ljharb",
			"editors": []
		},
		"hola": {
			"alias": "hello"
		},
		"new": {
			"value": "`var a = new b(c, d);` is kind of like `var a = Object.create(b.prototype); b.call(a, c, d);` (there's a number of exceptions). https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new",
			"popularity": 64,
			"creator": "Havvy",
			"editors": [
				"ImBcmDth",
				"Maxdamantus",
				"Sorella",
				"Havvy"
			],
			"changes": [
				{
					"date": "2014-04-16T23:51:30.128Z",
					"editor": "Maxdamantus",
					"old-value": "in words: https://gist.github.com/Havvy/5037770 in picture: http://i.imgur.com/afA8hs9.png",
					"new-value": "in words: https://gist.github.com/Havvy/503777"
				},
				{
					"date": "2014-04-16T23:59:26.795Z",
					"editor": "Maxdamantus",
					"old-value": "in words: https://gist.github.com/Havvy/503777",
					"new-value": "function new(constr, args){ var o = Object.create(constr.prototype), r = constr.apply(o, args); return r !== null && typeof r == \"object\"? r : o; }"
				},
				{
					"date": "2014-04-17T00:00:15.954Z",
					"editor": "Maxdamantus",
					"old-value": "function new(constr, args){ var o = Object.create(constr.prototype), r = constr.apply(o, args); return r !== null && typeof r == \"object\"? r : o; }",
					"new-value": "in words: https://gist.github.com/Havvy/503777"
				},
				{
					"date": "2014-04-20T01:25:35.524Z",
					"editor": "Sorella",
					"old-value": "in words: https://gist.github.com/Havvy/503777",
					"new-value": "in words: https://gist.github.com/Havvy/5037770",
					"regex": "s/$/0/"
				},
				{
					"date": "2014-04-20T01:26:47.602Z",
					"editor": "Havvy",
					"old-value": "in words: https://gist.github.com/Havvy/5037770",
					"new-value": "in words: https://gist.github.com/Havvy/5037770 | MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new",
					"regex": "s/$/ | MDN: https:\\/\\/developer.mozilla.org\\/en-US\\/docs\\/Web\\/JavaScript\\/Reference\\/Operators\\/new/"
				},
				{
					"date": "2014-04-20T01:27:07.344Z",
					"editor": "Havvy",
					"old-value": "in words: https://gist.github.com/Havvy/5037770 | MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new",
					"new-value": "https://gist.github.com/Havvy/5037770 | MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new",
					"regex": "s/in words: //"
				},
				{
					"date": "2014-07-09T07:32:06.303Z",
					"editor": "Maxdamantus",
					"old-value": "https://gist.github.com/Havvy/5037770 | MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new",
					"new-value": "`var a = new b(c, d);` is kind of like `var a = Object.create(b.prototype); b.call(a, c, d);`. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new"
				},
				{
					"date": "2014-07-09T07:37:07.874Z",
					"editor": "Maxdamantus",
					"old-value": "`var a = new b(c, d);` is kind of like `var a = Object.create(b.prototype); b.call(a, c, d);`. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new",
					"new-value": "`var a = new b(c, d);` is kind of like `var a = Object.create(b.prototype); b.call(a, c, d);` (there's a number of exceptions). https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new"
				}
			]
		},
		"prototype confusion": {
			"value": "The [[Prototype]] of an object is not related to the 'prototype' property it may have. For a function `Foo`, `Foo.prototype` is the [[Prototype]] of `new Foo`. The [[Prototype]] of `Foo` itself is `Function.prototype`.",
			"popularity": 1,
			"creator": "Mortchek",
			"editors": []
		},
		"cross": {
			"alias": "same",
			"popularity": 18
		},
		"is function": {
			"value": "Some browsers' host objects (IE, of course) are functions, but typeof doesn't return \"function\". Object.prototype.toString.call(foo) === '[object Function]' is reliable.",
			"popularity": 0,
			"creator": "ljharb",
			"editors": []
		},
		"first class functions": {
			"alias": "first-class functions",
			"popularity": 1
		},
		"patterns": {
			"value": "Learning Javascript Design Patterns by Addy Osmani : http://addyosmani.com/resources/essentialjsdesignpatterns/book/",
			"popularity": 17,
			"creator": "CoverSlide",
			"editors": []
		},
		"duck ducktype ducktyping duck-typing": {
			"value": "A pattern of testing an object is what you think it is in a loose way. http://en.wikipedia.org/wiki/Duck_typing",
			"popularity": 1,
			"creator": "sukima",
			"editors": []
		},
		"duckpunching duck-punching punching punch": {
			"value": "A pattern of making an object look and act like another object. Also known as monkey-patching. http://en.wikipedia.org/wiki/Monkey_patch",
			"popularity": 2,
			"creator": "sukima",
			"editors": []
		},
		"falsey": {
			"alias": "truthy"
		},
		"onclick": {
			"alias": "inline",
			"popularity": 5
		},
		"iteration": {
			"value": "Instead of using for or while loop constructs to iterate over arrays, consider using array iteration methods (i.e., forEach, every, some, filter, map, reduce, reduceRight, or a combination thereof). They relieve the need for manual iteration, provide better abstraction, and make it clear what your iteration is doing.",
			"popularity": 60,
			"creator": "Mortchek",
			"editors": [
				"Mortchek"
			]
		},
		"es6 shim": {
			"value": "The ES6 spec is almost finalized, so you should use https://github.com/es-shims/es6-shim to get all the backwards-compatible features of ES6 in every browser! It's fully tested, and requires the !es5 shim.",
			"popularity": 71,
			"creator": "ljharb",
			"editors": [
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-01-06T00:01:29.837Z",
					"editor": "ljharb",
					"old-value": "Once the ES6 spec is finalized, you can use https://github.com/paulmillr/es6-shim to get all the backwards-compatible features of ES6 in every browser! It's fully tested, and requires the !es5 shim.",
					"new-value": "Once the ES6 spec is finalized, you can use https://github.com/es-shims/es6-shim to get all the backwards-compatible features of ES6 in every browser! It's fully tested, and requires the !es5 shim."
				},
				{
					"date": "2014-07-18T10:11:38.106Z",
					"editor": "ljharb",
					"old-value": "Once the ES6 spec is finalized, you can use https://github.com/es-shims/es6-shim to get all the backwards-compatible features of ES6 in every browser! It's fully tested, and requires the !es5 shim.",
					"new-value": "The ES6 spec is almost finalized, so you should use https://github.com/es-shims/es6-shim to get all the backwards-compatible features of ES6 in every browser! It's fully tested, and requires the !es5 shim."
				}
			]
		},
		"document.head": {
			"value": "Use this shim for document.head in IE 8 and below: `if (!document.head) { document.head = document.getElementsByTagName('head')[0]; }`",
			"popularity": 5,
			"creator": "ljharb",
			"editors": []
		},
		"editors": {
			"value": "Popular text editors used by folks in ##javascript: Vim <http://www.vim.org/>, Emacs <https://www.gnu.org/software/emacs/>, Sublime Text <http://www.sublimetext.com/>, TextMate (Mac only) <http://macromates.com/>",
			"popularity": 17,
			"creator": "Havvy",
			"editors": [
				"Havvy",
				"Mortchek",
				"jaspr"
			]
		},
		"microjs": {
			"value": "http://microjs.com/ : a listing of (mostly) small javascript libraries. Try searching your requirement!",
			"popularity": 2,
			"creator": "diamonds",
			"editors": []
		},
		"emergency": {
			"value": "Emergency! GarethAdams buu Gozzy Boki Phrogz Woosta dorward Twey inimino gkatsev dwcook",
			"popularity": 34,
			"creator": "dwcook",
			"editors": []
		},
		"false": {
			"alias": "truthy",
			"popularity": 2
		},
		"clone": {
			"value": "arrays:  yourArray.slice();  array-likes: Array.prototype.slice.call(yourArrayLike);   objects: say !copy",
			"popularity": 5,
			"creator": "Havvy",
			"editors": [
				"GreenJello"
			],
			"changes": [
				{
					"date": "2014-01-26T09:13:51.914Z",
					"editor": "GreenJello",
					"old-value": "arrays:  yourArray.slice();  array-likes: Array.prototype.slice.call(yourArrayLike);   objects: ???",
					"new-value": "arrays:  yourArray.slice();  array-likes: Array.prototype.slice.call(yourArrayLike);   objects: say !copy"
				}
			]
		},
		"core": {
			"value": "http://dmitrysoshnikov.com/ecmascript/javascript-the-core/",
			"popularity": 0,
			"creator": "Havvy",
			"editors": []
		},
		"terminology": {
			"value": "Terminology in PLT is much more fucked up than in all other areas of CS. Please don't try to apply terms from English or any other language to JS, check out the specs instead.",
			"popularity": 0,
			"creator": "sorella",
			"editors": []
		},
		"inheritance": {
			"value": "JavaScript does not really have \"inheritance\" like classical languages. What it has is more properly called \"property delegation\" or \"behavior delegation\" http://davidwalsh.name/javascript-objects - ie `foo.bar(baz)` when `!foo.hasOwnProperty('bar')` is essentially doing `Object.getPrototypeOf(foo).bar.call(foo, baz)`",
			"popularity": 170,
			"creator": "ljharb",
			"editors": [
				"Agamemnus",
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-01-22T04:56:20.271Z",
					"editor": "Agamemnus",
					"old-value": "JavaScript does not really have \"inheritance\" like classical languages. What it has is more properly called \"behavior delegation\" http://davidwalsh.name/javascript-objects",
					"new-value": "test"
				},
				{
					"date": "2014-01-22T04:57:44.053Z",
					"editor": "Agamemnus",
					"old-value": "test",
					"new-value": "Computer science classes say, \"inheritance all the way.\" Experienced programmers say, \"prefer composition over inheritance.\" See: http://en.wikipedia.org/wiki/Composition_over_inheritance , http://www.stackoverflow.com/questions/49002/prefer-composition-over-inheritance?"
				},
				{
					"date": "2014-01-22T04:58:06.549Z",
					"editor": "Agamemnus",
					"old-value": "Computer science classes say, \"inheritance all the way.\" Experienced programmers say, \"prefer composition over inheritance.\" See: http://en.wikipedia.org/wiki/Composition_over_inheritance , http://www.stackoverflow.com/questions/49002/prefer-composition-over-inheritance?",
					"new-value": "Computer science classes say, \"inheritance all the way\". Experienced programmers say, \"prefer composition over inheritance\". See: http://en.wikipedia.org/wiki/Composition_over_inheritance, http://www.stackoverflow.com/questions/49002/prefer-composition-over-inheritance?"
				},
				{
					"date": "2014-01-22T08:46:44.169Z",
					"editor": "ljharb",
					"old-value": "Computer science classes say, \"inheritance all the way\". Experienced programmers say, \"prefer composition over inheritance\". See: http://en.wikipedia.org/wiki/Composition_over_inheritance, http://www.stackoverflow.com/questions/49002/prefer-composition-over-inheritance?",
					"new-value": "JavaScript does not really have \"inheritance\" like classical languages. What it has is more properly called \"behavior delegation\" http://davidwalsh.name/javascript-objects"
				},
				{
					"date": "2014-03-18T22:49:33.611Z",
					"editor": "ljharb",
					"old-value": "JavaScript does not really have \"inheritance\" like classical languages. What it has is more properly called \"behavior delegation\" http://davidwalsh.name/javascript-objects",
					"new-value": "JavaScript does not really have \"inheritance\" like classical languages. What it has is more properly called \"property delegation\" or \"behavior delegation\" http://davidwalsh.name/javascript-objects - ie `foo.bar(baz)` when `!foo.hasOwnProperty('bar')` is essentially doing `Object.getPrototypeOf(foo).bar.call(foo, baz)`"
				}
			]
		},
		"hoisted": {
			"alias": "hoist",
			"popularity": 7
		},
		"fe": {
			"value": "A function declaration `function declared() {}` & a function expression e.g. `var bar = function expressed() {}`: the former is !hoisted, the latter can be immediately invoked (see !iife) and can be anonymous (eg can omit the name \"expressed\"). \"function\" as the first word of a statement at global scope or directly inside a function starts a function declaration; otherwise, it starts a function expression.",
			"popularity": 50,
			"creator": "ljharb",
			"editors": [
				"ljharb"
			]
		},
		"fd": {
			"alias": "fe",
			"popularity": 1
		},
		"json object": {
			"value": "JSON object is an often misused buzzword that does not have a well-defined meaning. See https://github.com/robotlolita/screw-the-buzzwords/wiki/JSON for alternatives to express what you mean.",
			"popularity": 9,
			"creator": "sacho_",
			"editors": [
				"Sorella"
			]
		},
		"think": {
			"value": "\"Give me 6 hours to chop down a tree and I will spend the first 4 sharpening my axe.\" - Abraham Lincoln",
			"popularity": 2,
			"creator": "ljharb",
			"editors": [
				"ljharb"
			]
		},
		"tanstaafl": {
			"value": "There ain't no such thing as a free lunch",
			"popularity": 1,
			"creator": "aeoril",
			"editors": []
		},
		"preamble": {
			"value": "We hold these truths to be self evident, that all men are created equal",
			"popularity": 6,
			"creator": "aeoril",
			"editors": []
		},
		"not next": {
			"value": "Sorry, but your help wasn't helpful.",
			"popularity": 1,
			"creator": "Havvy",
			"editors": []
		},
		"common sense": {
			"value": "Have common sense.",
			"popularity": 2,
			"creator": "PigDude",
			"editors": []
		},
		"csp": {
			"value": "Content Security Policy (CSP) is an added layer of security to detect/mitigate certain attacks, including XSS and data injection. https://developer.mozilla.org/en-US/docs/Security/CSP",
			"popularity": 6,
			"creator": "ljharb",
			"editors": []
		},
		"dontlike": {
			"value": "You don't like PHP. Great! Go discuss it in #programming.",
			"popularity": 4,
			"creator": "diamonds",
			"editors": [
				"dwcook",
				"diamonds"
			]
		},
		"alt": {
			"alias": "alternative",
			"popularity": 1
		},
		"alternative": {
			"value": "Please suggest an alternative when damning a popular library. Suggestions are useful, 'jquery sucks' is useless, unoriginal, and boring.",
			"popularity": 2,
			"creator": "dwcook",
			"editors": []
		},
		"criticism": {
			"alias": "alternative"
		},
		"ide": {
			"alias": "editors",
			"popularity": 4
		},
		"var from string": {
			"value": "If you have the string name of a variable, and the object to which the variable belongs, you can access the variable using square brackets: object[name]. If the variable is global, you can use the global object to access it: <global object>[name] (e.g., in a browser, window[name]). If the variable is in a local scope, you cannot access it using its name.",
			"popularity": 12,
			"creator": "j201",
			"editors": []
		},
		"{} + {}": {
			"value": "http://www.benjiegillam.com/2013/06/quantum-javascript/",
			"popularity": 3,
			"creator": "Havvy",
			"editors": []
		},
		"wat": {
			"value": "https://www.destroyallsoftware.com/talks/wat‎",
			"popularity": 8,
			"creator": "Havvy",
			"editors": []
		},
		"uri": {
			"value": "For dealing with URIs use http://medialize.github.io/URI.js/ or one of the https://github.com/medialize/URI.js#alternatives",
			"popularity": 19,
			"creator": "ashnur",
			"editors": []
		},
		"asp": {
			"alias": "backend"
		},
		"backbone": {
			"value": "Backbone support channel: #documentcloud",
			"popularity": 8,
			"creator": "dwcook",
			"editors": []
		},
		"framework": {
			"value": "Check out http://todomvc.com/ for help deciding on a web framework.",
			"popularity": 8,
			"creator": "j201",
			"editors": []
		},
		"gorillascript": {
			"value": "http://ckknight.github.io/gorillascript/",
			"popularity": 0,
			"creator": "Havvy",
			"editors": [
				"ckknight"
			]
		},
		"fuckitjs": {
			"value": "https://github.com/mattdiamond/fuckitjs",
			"popularity": 3,
			"creator": "Havvy",
			"editors": []
		},
		"amd": {
			"value": "http://en.wikipedia.org/wiki/Asynchronous_module_definition",
			"popularity": 2,
			"creator": "ckknight",
			"editors": []
		},
		"atomic": {
			"value": "\"An atomic group is a group that, when the regex engine exits from it, automatically throws away all backtracking positions remembered by any tokens inside the group. Atomic groups are non-capturing. The syntax is (?>group)\" [ http://www.regular-expressions.info/atomic.html ]",
			"popularity": 2,
			"creator": "MJCD",
			"editors": []
		},
		"literal inheritance": {
			"value": "You can't directly set the prototype of an object literal, but you can make a helper function that's almost as good: http://j201.github.io/blog/2013/06/22/js-object-literal-inheritance/",
			"popularity": 8,
			"creator": "j201",
			"editors": []
		},
		"altjs": {
			"value": "Most programming languages offer a way of compiling code to JavaScript. There are also languages designed specifically for this. Take a look at http://git.io/altjs",
			"popularity": 21,
			"creator": "Sorella",
			"editors": [
				"Sorella",
				"j201",
				"GreenJello"
			],
			"changes": [
				{
					"date": "2014-04-24T00:13:02.098Z",
					"editor": "j201",
					"old-value": "Most programming languages offer a way of compiling code to JavaScript. There are also languages designed specifically for this. Take a look at http://altjs.org/",
					"new-value": "Most programming languages offer a way of compiling code to JavaScript. There are also languages designed specifically for this. Take a look at https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS",
					"regex": "s/http.+$/https:\\/\\/github.com\\/jashkenas\\/coffee-script\\/wiki\\/List-of-languages-that-compile-to-JS/"
				},
				{
					"date": "2014-04-24T00:15:17.909Z",
					"editor": "GreenJello",
					"old-value": "Most programming languages offer a way of compiling code to JavaScript. There are also languages designed specifically for this. Take a look at https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS",
					"new-value": "Most programming languages offer a way of compiling code to JavaScript. There are also languages designed specifically for this. Take a look at http://git.io/altjs"
				}
			]
		},
		"w3tools": {
			"alias": "w3schools"
		},
		"strict mode": {
			"value": "Strict mode is an opt-in mode for JS that fixes, disables, and changes some of the most problematic features of the language. https://gist.github.com/gkatsev/4685345",
			"popularity": 17,
			"creator": "gkatsev",
			"editors": [
				"gkatsev"
			]
		},
		"aasdfgh": {
			"alias": "foobarbaz"
		},
		"stop constructors": {
			"value": "Public constructors are problematic for a number of reasons, e.g. they couple the calling code to the constructor implementation.  http://ericleads.com/2012/09/stop-using-constructor-functions-in-javascript/",
			"popularity": 30,
			"creator": "ashnur",
			"editors": []
		},
		"pass by value": {
			"value": "JavaScript has call-by-value semantics in which references to objects are considered to be a type of value. Direct assignment to an argument will never be visible outside of a function. For a detailed explanation, see: http://www.jon-carlos.com/2013/is-javascript-call-by-value-or-call-by-reference/",
			"popularity": 42,
			"creator": "gkatsev",
			"editors": [
				"ImBcmDth",
				"dwcook"
			],
			"changes": [
				{
					"date": "2014-03-20T19:57:04.394Z",
					"editor": "dwcook",
					"old-value": "JavaScript has call-by-value semantics in which references are considered to be a type of value. Direct assignment to an argument will never be visible outside of a function. For a detailed and somewhat boring explanation, see: http://www.jon-carlos.com/2013/is-javascript-call-by-value-or-call-by-reference/",
					"new-value": "JavaScript has call-by-value semantics in which references to objects are considered to be a type of value. Direct assignment to an argument will never be visible outside of a function. For a detailed and somewhat boring explanation, see: http://www.jon-carlos.com/2013/is-javascript-call-by-value-or-call-by-reference/",
					"regex": "s/references/references to objects/"
				},
				{
					"date": "2014-03-20T19:57:32.076Z",
					"editor": "dwcook",
					"old-value": "JavaScript has call-by-value semantics in which references to objects are considered to be a type of value. Direct assignment to an argument will never be visible outside of a function. For a detailed and somewhat boring explanation, see: http://www.jon-carlos.com/2013/is-javascript-call-by-value-or-call-by-reference/",
					"new-value": "JavaScript has call-by-value semantics in which references to objects are considered to be a type of value. Direct assignment to an argument will never be visible outside of a function. For a detailed explanation, see: http://www.jon-carlos.com/2013/is-javascript-call-by-value-or-call-by-reference/",
					"regex": "s/and somewhat boring //"
				}
			]
		},
		"pass by reference": {
			"alias": "pass by value",
			"popularity": 11
		},
		"superhero": {
			"value": "http://superherojs.com/ a great collection articles, videos, and presentations about javascript.",
			"popularity": 8,
			"creator": "gkatsev",
			"editors": []
		},
		"superherojs": {
			"alias": "superhero"
		},
		"call by value": {
			"alias": "pass by value"
		},
		"call by reference": {
			"alias": "pass by value",
			"popularity": 2
		},
		"ham": {
			"alias": "hamster"
		},
		"dsamarin": {
			"value": "god",
			"popularity": 0,
			"creator": "dsamarin",
			"editors": []
		},
		"resize using canvas": {
			"value": "see http://davidwalsh.name/resize-image-canvas",
			"popularity": 2,
			"creator": "gkatsev",
			"editors": []
		},
		"moz": {
			"value": "https://developer.mozilla.org/en-US/docs/Web/CSS/Reference/Mozilla_Extensions?redirectlocale=en-US&redirectslug=Web%2FCSS%2FCSS_Reference%2FMozilla_Extensions",
			"popularity": 0,
			"creator": "MJCD",
			"editors": []
		},
		"ie": {
			"value": "http://blogs.msdn.com/b/ie/archive/2008/09/08/microsoft-css-vendor-extensions.aspx",
			"popularity": 0,
			"creator": "MJCD",
			"editors": []
		},
		"webkit": {
			"value": "http://css-infos.net/properties/webkit",
			"popularity": 0,
			"creator": "MJCD",
			"editors": []
		},
		"multiline": {
			"value": "Multiline string literals require you to escape newlines or use separate strings combined with the + operator: https://gist.github.com/j201/6227909",
			"popularity": 9,
			"creator": "j201",
			"editors": []
		},
		"marquee": {
			"value": "The marquee tag is a non-standard HTML element which causes text to scroll up, down, left or right automatically. The tag was first introduced in early versions of Microsoft's Internet Explorer, and was compared to Netscape's blink element, as a proprietary non-standard extension to the HTML standard with usability problems. Do not use.",
			"popularity": 1,
			"creator": "MJCD",
			"editors": []
		},
		"tutorial": {
			"value": "It is highly recommended that you establish a firm grasp of the core syntax within both javascript and HTML before asking any syntax error related questions. A good tutorial is: http://eloquentjavascript.net/ - you can also use http://validator.w3.org/ (HTML) and http://www.jslint.com/ (JS) to make sure your code passes.",
			"popularity": 24,
			"creator": "MJCD",
			"editors": []
		},
		"confuse me": {
			"value": "Sure thing, boss! http://i.imgur.com/mbKmJdL.png",
			"popularity": 23,
			"creator": "ImBcmDth",
			"editors": [
				"ImBcmDth"
			]
		},
		"fp": {
			"value": "Functional programming: A style of programming which uses only pure (mathematical) functions, avoiding side-effects",
			"popularity": 25,
			"creator": "Sorella",
			"editors": [
				"Sorella",
				"Maxdamantus",
				"j201",
				"ashnur"
			],
			"changes": [
				{
					"date": "2014-04-17T23:40:54.072Z",
					"editor": "Sorella",
					"old-value": "1) A style of programming which uses only pure (mathematical) functions, avoiding mutation of state; 2) A term used loosely by many to refer to higher-order programming, where functions or procedures are first-class citizens and are passed around to influence the effects of other functions or procedures",
					"new-value": "1) A style of programming which uses only pure (mathematical) functions, avoiding side-effects; 2) A term used loosely by many to refer to higher-order programming, where functions or procedures are first-class citizens and are passed around to influence the effects of other functions or procedures",
					"regex": "s/avoiding mutation of state/avoiding side-effects/"
				},
				{
					"date": "2014-04-17T23:41:25.827Z",
					"editor": "j201",
					"old-value": "1) A style of programming which uses only pure (mathematical) functions, avoiding side-effects; 2) A term used loosely by many to refer to higher-order programming, where functions or procedures are first-class citizens and are passed around to influence the effects of other functions or procedures",
					"new-value": "Functional programming: 1) A style of programming which uses only pure (mathematical) functions, avoiding side-effects; 2) A term used loosely by many to refer to higher-order programming, where functions or procedures are first-class citizens and are passed around to influence the effects of other functions or procedures",
					"regex": "s/^/Functional programming: /"
				},
				{
					"date": "2014-05-02T18:39:27.036Z",
					"editor": "ashnur",
					"old-value": "Functional programming: 1) A style of programming which uses only pure (mathematical) functions, avoiding side-effects; 2) A term used loosely by many to refer to higher-order programming, where functions or procedures are first-class citizens and are passed around to influence the effects of other functions or procedures",
					"new-value": "Functional programming: A style of programming which uses only pure (mathematical) functions, avoiding side-effects"
				}
			]
		},
		"!": {
			"value": "!! is a convenient shorthand for converting a truthy/falsy value to true/false, similar to the more verbose `Boolean` function.",
			"popularity": 62,
			"creator": "ImBcmDth",
			"editors": [
				"yansanmo",
				"ImBcmDth",
				"dwcook",
				"FireFly",
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-02-21T05:15:54.322Z",
					"editor": "yansanmo",
					"old-value": "A convenient shorthand for converting a truthy/falsey value to true/false.",
					"new-value": "Bang bang"
				},
				{
					"date": "2014-02-24T02:32:33.303Z",
					"editor": "ImBcmDth",
					"old-value": "Bang bang",
					"new-value": "A convenient shorthand for converting a truthy/falsey value to true/false."
				},
				{
					"date": "2014-03-22T04:41:14.705Z",
					"editor": "dwcook",
					"old-value": "A convenient shorthand for converting a truthy/falsey value to true/false.",
					"new-value": "!! is a convenient shorthand for converting a truthy/falsey value to true/false.",
					"regex": "s/A/!! is a/"
				},
				{
					"date": "2014-03-22T15:29:32.596Z",
					"editor": "FireFly",
					"old-value": "!! is a convenient shorthand for converting a truthy/falsey value to true/false.",
					"new-value": "!! is a convenient shorthand for converting a truthy/falsey value to true/false, compared to the more verbose `Boolean` function.",
					"regex": "s/.$/, compared to the more verbose `Boolean` function./"
				},
				{
					"date": "2014-03-22T15:29:46.295Z",
					"editor": "FireFly",
					"old-value": "!! is a convenient shorthand for converting a truthy/falsey value to true/false, compared to the more verbose `Boolean` function.",
					"new-value": "!! is a convenient shorthand for converting a truthy/falsey value to true/false, similar to the more verbose `Boolean` function.",
					"regex": "s/compared/similar/"
				},
				{
					"date": "2014-03-22T18:09:53.670Z",
					"editor": "ljharb",
					"old-value": "!! is a convenient shorthand for converting a truthy/falsey value to true/false, similar to the more verbose `Boolean` function.",
					"new-value": "!! is a convenient shorthand for converting a truthy/falsy value to true/false, similar to the more verbose `Boolean` function.",
					"regex": "s/falsey/falsy/"
				}
			]
		},
		"record": {
			"value": "Recommended reading on capturing audio/video signals using HTML5; http://www.html5rocks.com/en/tutorials/getusermedia/intro/",
			"popularity": 2,
			"creator": "MJCD",
			"editors": []
		},
		"modules": {
			"value": "The current specification of ECMAScript doesn't define modules. Second-class modules are coming in ES6, but JS is powerful enough to encode first-class ones. Major implementations include AMD, CommonJS and Node modules (a modified CJS system). All of them can be used in any JS VM, including browsers. See also: http://robotlolita.me/2013/06/06/node-modules-to-rule-them-all.html",
			"popularity": 35,
			"creator": "Sorella",
			"editors": [
				"Sorella"
			],
			"changes": [
				{
					"date": "2014-07-02T17:16:02.844Z",
					"editor": "Sorella",
					"old-value": "The current specification of ECMAScript doesn't define modules. Second-class modules are coming in ES6, but JS is powerful enough to encode first-class ones. Major implementations include AMD, CommonJS and Node modules (a modified CJS system). All of them can be used in any JS VM, including browsers. See also: http://robotlolita.github.io/2013/06/06/node-modules-to-rule-them-all.html",
					"new-value": "The current specification of ECMAScript doesn't define modules. Second-class modules are coming in ES6, but JS is powerful enough to encode first-class ones. Major implementations include AMD, CommonJS and Node modules (a modified CJS system). All of them can be used in any JS VM, including browsers. See also: http://robotlolita.me/2013/06/06/node-modules-to-rule-them-all.html",
					"regex": "s/\\.github\\.io/.me/"
				}
			]
		},
		"anonymous function": {
			"value": "The term \"anonymous function\" has somewhat ambiguous usage. People have used it to mean \"function expression\", \"function not bound to a variable\", and \"function with no name\". It couldn't hurt to clarify which you mean.",
			"popularity": 0,
			"creator": "dwcook",
			"editors": [
				"dwcook"
			]
		},
		"anon": {
			"alias": "anonymous function"
		},
		"imperative": {
			"value": "A programming style that focuses on sequential statements (commands), which move the computer from one state to another.",
			"popularity": 4,
			"creator": "Sorella",
			"editors": [
				"Sorella",
				"Agamemnus"
			]
		},
		"unicode": {
			"value": "This blog post is a brief introduction to Unicode and how it is handled in JavaScript. http://www.2ality.com/2013/09/javascript-unicode.html",
			"popularity": 0,
			"creator": "ashnur",
			"editors": []
		},
		"allongé": {
			"value": "https://leanpub.com/javascript-allonge/read",
			"popularity": 2,
			"creator": "fwg",
			"editors": []
		},
		"pressure": {
			"value": "http://toys.usvsth3m.com/javascript-under-pressure/",
			"popularity": 6,
			"creator": "ashnur",
			"editors": []
		},
		"optimisation": {
			"value": "Don't try to optimise if you have no clue about what goes 'round the JIT. JITs are *really* smart, and they do lots of complex optimisations based off dynamic type inferencing and execution analysis over time,  that'll defeat your naive reasoning. See: https://www.youtube.com/watch?v=65-RbBwZQdU",
			"popularity": 24,
			"creator": "Sorella",
			"editors": [
				"Sorella"
			]
		},
		"optimization": {
			"alias": "optimisation",
			"popularity": 9,
			"editors": [
				"Sorella"
			],
			"changes": [
				{
					"date": "2014-02-26T23:14:48.322Z",
					"editor": "Sorella",
					"old-alias": "optimisation",
					"new-alias": "optimisation"
				}
			]
		},
		"media": {
			"value": "A comprehensive guide to cross-device CSS media queries; http://pugetworks.com/blog/2011/04/css-media-queries-for-targeting-different-mobile-devices/",
			"popularity": 0,
			"creator": "MJCD",
			"editors": []
		},
		"sourcemap": {
			"value": "A great article on source maps: https://hacks.mozilla.org/2013/05/compiling-to-javascript-and-debugging-with-source-maps/",
			"popularity": 1,
			"creator": "MJCD",
			"editors": []
		},
		"strict": {
			"alias": "strict mode",
			"popularity": 5
		},
		"important": {
			"value": "CSS: \"An !important declaration provides a way for a stylesheet author to give a CSS value more weight than it naturally has.\" | More: http://coding.smashingmagazine.com/2010/11/02/the-important-css-declaration-how-and-when-to-use-it/",
			"popularity": 1,
			"creator": "MJCD_",
			"editors": []
		},
		"numbers talk": {
			"value": "http://www.youtube.com/watch?v=MqHDDtVYJRI Bartek Szopka: Everything you never wanted to know about JavaScript Numbers",
			"popularity": 11,
			"creator": "ashnur",
			"editors": []
		},
		"pastebin": {
			"value": "Pastebin is not cool, sites like http://gist.github.com/ and http://bpaste.net/ are cool! You can also use http://jsbin.com , http://requirebin.com or http://jsfiddle.net/ to provide a test case we can run and help you with your problem.",
			"popularity": 40,
			"creator": "jaspr",
			"editors": []
		},
		"asknow": {
			"value": "Just ask! Sit back, relax, and you will be helped shortly.",
			"popularity": 3,
			"creator": "jaspr",
			"editors": []
		},
		"asi": {
			"value": "ASI stands for 'automatic semicolon insertion', a mechanism by which semicolons may be omitted from the source code in certain cases, and still be recognized by the parser. For details: http://inimino.org/~inimino/blog/javascript_semicolons - for fewer details and a commonly-held opinion, see http://goo.gl/QEYT4g",
			"popularity": 47,
			"creator": "ashnur",
			"editors": [
				"ImBcmDth",
				"Agamemnus"
			],
			"changes": [
				{
					"date": "2014-08-05T09:01:31.153Z",
					"editor": "Agamemnus",
					"old-value": "ASI stands for 'automatic semicolon insertion', a mechanism by which semicolons may be omitted from the source code in certain cases, and still be recognised by the parser. For details: http://inimino.org/~inimino/blog/javascript_semicolons - for fewer details and a commonly-held opinion, see http://goo.gl/QEYT4g",
					"new-value": "ASI stands for 'automatic semicolon insertion', a mechanism by which semicolons may be omitted from the source code in certain cases, and still be recognized by the parser. For details: http://inimino.org/~inimino/blog/javascript_semicolons - for fewer details and a commonly-held opinion, see http://goo.gl/QEYT4g"
				},
				{
					"date": "2014-08-05T09:01:44.327Z",
					"editor": "Agamemnus",
					"old-value": "ASI stands for 'automatic semicolon insertion', a mechanism by which semicolons may be omitted from the source code in certain cases, and still be recognized by the parser. For details: http://inimino.org/~inimino/blog/javascript_semicolons - for fewer details and a commonly-held opinion, see http://goo.gl/QEYT4g",
					"new-value": "ASI stands for 'automatic semicolon insertion', a mechanism by which semicolons may be omitted from the source code in certain cases, and still be recognized by the parser. For details: http://inimino.org/~inimino/blog/javascript_semicolons - for fewer details and a commonly-held opinion, see http://goo.gl/QEYT4g"
				}
			]
		},
		"semicolons": {
			"value": "Here we go again...",
			"popularity": 13,
			"creator": "j201",
			"editors": []
		},
		"allonge": {
			"alias": "allongé"
		},
		"benvie": {
			"value": "the elusive Benvie may sometimes be found here but mostly on mozilla's IRC network and on twitter.",
			"popularity": 3,
			"creator": "gkatsev",
			"editors": []
		},
		"execution model": {
			"value": "JavaScript is a strict, eager, run-to-completion, top-down, applicative order language. The standard library operations are executed synchronously. Some extensions may add asynchronous operations. For example, Node.js or the Browser.",
			"popularity": 7,
			"creator": "Sorella",
			"editors": [
				"Sorella"
			]
		},
		"modal": {
			"value": "\"Modal window\" is just a fancy way to say \"some div floating over everything pretending to be a window and not allowing interaction with any other part of the page until the 'window' is dimissed.\" -- ch3mical.",
			"popularity": 5,
			"creator": "Agamemnus",
			"editors": [
				"Agamemnus"
			]
		},
		"factoids": {
			"value": "http://boshi.inimino.org/ecmabot-factoids.json",
			"popularity": 34,
			"creator": "inimino",
			"editors": []
		},
		"backend": {
			"value": "You're showing us (PHP|ASP|other backend language) code, but asking a question about the browser, which sees the output. Maybe your code produces correct output, maybe it doesn't. Please show us the HTML as the browser sees it.",
			"popularity": 24,
			"creator": "dwcook",
			"editors": [
				"dwcook"
			]
		},
		"src object.create": {
			"value": "Object.create = function(o){ function f(){} f.prototype = o; return new f(); };",
			"popularity": 6,
			"creator": "Maxdamantus",
			"editors": []
		},
		"tried": {
			"value": "Give us some context - what have you tried? What have you read? http://mattgemmell.com/what-have-you-tried/",
			"popularity": 9,
			"creator": "diamonds",
			"editors": [
				"Agamemnus"
			],
			"changes": [
				{
					"date": "2014-06-10T21:36:16.461Z",
					"editor": "Agamemnus",
					"old-value": "What have you tried?",
					"new-value": "\"Give us some context - what have you tried? What have you read? http://mattgemmell.com/what-have-you-tried/\""
				},
				{
					"date": "2014-06-10T21:37:46.358Z",
					"editor": "Agamemnus",
					"old-value": "\"Give us some context - what have you tried? What have you read? http://mattgemmell.com/what-have-you-tried/\"",
					"new-value": "Give us some context - what have you tried? What have you read? http://mattgemmell.com/what-have-you-tried/"
				}
			]
		},
		"premature": {
			"alias": "premature optimization",
			"popularity": 4
		},
		"modularize": {
			"alias": "modularising",
			"popularity": 1
		},
		"modularise": {
			"alias": "modularising"
		},
		"modularizing": {
			"alias": "modularising"
		},
		"reason": {
			"value": "Please explain why you need to even do such a thing. What are you trying to accomplish? What is your final goal? You may find that you are approaching the problem the wrong way.",
			"popularity": 2,
			"creator": "dwcook",
			"editors": []
		},
		"cps": {
			"value": "Continuation-Passing style is the formal term for the \"callback-based\" approach to programming. CPS is a heavily used idiom in JavaScript to deal with asynchronous programming. See http://matt.might.net/articles/by-example-continuation-passing-style/",
			"popularity": 32,
			"creator": "Sorella",
			"editors": []
		},
		"pofl": {
			"value": "a Plain Old For Loop",
			"creator": "ImBcmDth",
			"date": "2013-12-12T16:26:51.287Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"callback": {
			"value": "A function you pass to another function expecting it to be called when the result of the function you called is known.",
			"creator": "Havvy",
			"date": "2013-12-16T22:02:16.498Z",
			"popularity": 12,
			"editors": [],
			"changes": []
		},
		"callbackhell": {
			"value": "Callback hell is easily avoidable. Check out http://callbackhell.com , and look into Promises ( https://gist.github.com/domenic/3889970 )",
			"creator": "dsamarin",
			"date": "2013-12-16T22:02:25.320Z",
			"popularity": 6,
			"editors": [],
			"changes": []
		},
		"callbacks": {
			"alias": "callback",
			"creator": "dsamarin",
			"date": "2013-12-16T22:04:51.425Z",
			"popularity": 5,
			"editors": [],
			"changes": []
		},
		"cb": {
			"alias": "callback",
			"creator": "Havvy",
			"date": "2013-12-16T22:05:06.966Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"mnd": {
			"alias": "mdc",
			"creator": "",
			"date": "2013-12-17T09:30:03.502Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"evaluation model": {
			"alias": "execution model",
			"creator": "Sorella",
			"date": "2013-12-18T19:08:08.551Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"arraylike": {
			"value": "An object that has integral properties and a length property. You can use most Array.prototype methods on them (ex: Array.prototype.slice.call(arraylike)) even though they are not actually arrays. Examples include the arguments object and the DOM's NodeList.",
			"creator": "Havvy",
			"date": "2013-12-23T15:38:38.047Z",
			"popularity": 3,
			"editors": [],
			"changes": []
		},
		"jello": {
			"value": "GreenJello can overrule me on anything I say.",
			"creator": "GreenJello",
			"date": "2013-12-23T16:23:45.665Z",
			"popularity": 10,
			"editors": [],
			"changes": []
		},
		"test": {
			"value": "omg",
			"creator": "urbanizator",
			"date": "2013-12-23T16:26:17.770Z",
			"popularity": 31,
			"editors": [],
			"changes": []
		},
		"urban": {
			"value": "Urbanizator is the best",
			"creator": "urbanizator",
			"date": "2013-12-23T16:26:56.646Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"crockford": {
			"value": "http://yuiblog.com/crockford/ Videos by Douglas Crockford about JavaScript. Also on YouTube.",
			"creator": "Havvy",
			"date": "2013-12-26T07:17:58.691Z",
			"popularity": 4,
			"editors": [],
			"changes": []
		},
		"nowrap": {
			"value": "Under \"Frameworks & Extensions\" on jsfiddle, change \"onLoad\" to \"No wrap - in <body>\"; or stop putting event handlers in your HTML.",
			"creator": "GreenJello",
			"date": "2013-12-26T17:07:44.158Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"doesn't make sense": {
			"value": "What do you mean it doesn't make sense? Is it blind? What about the topic do you not understand? What do you feel is contradictory or incorrect? Most of us aren't simply voices in your head so we can't help you if you don't first explain your confusion.",
			"creator": "ImBcmDth",
			"date": "2013-12-27T06:07:46.223Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"thishelp": {
			"value": "A common source of confusion is `this`.  Explanation of the problem, and some solutions:  http://cdpn.io/moiwa",
			"creator": "GreenJello",
			"date": "2013-12-27T17:11:08.428Z",
			"popularity": 15,
			"editors": [],
			"changes": []
		},
		"blackkbot": {
			"value": "what?",
			"creator": "blackkbot",
			"date": "2013-12-28T08:40:48.440Z",
			"popularity": 12,
			"editors": [],
			"changes": []
		},
		"this is madness": {
			"value": "THIS IS JAVASCRIPT",
			"creator": "darbicus",
			"date": "2013-12-28T23:03:47.661Z",
			"popularity": 12,
			"editors": [],
			"changes": []
		},
		"now": {
			"value": "'Use this shim for Date.now in IE 8 and below: `if (!Date.now) { Date.now = function () { return (new Date()).getTime(); }; }`",
			"creator": "ljharb",
			"date": "2014-01-06T00:05:54.557Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"polyfill": {
			"value": "A polyfill, or a shim, should be a spec-compliant method of providing functionality to older environments that lack it. See !es5 shim, !es6 shim, !document.head, !raf, !now, etc.",
			"creator": "ljharb",
			"date": "2014-01-06T00:06:05.813Z",
			"popularity": 9,
			"editors": [],
			"changes": []
		},
		"shim": {
			"alias": "polyfill",
			"creator": "ljharb",
			"date": "2014-01-06T00:06:22.430Z",
			"popularity": 4,
			"editors": [],
			"changes": []
		},
		"askquestion": {
			"value": "Just ask your question, you don't have to ask permission to ask.",
			"creator": "urbanizator",
			"date": "2014-01-08T15:20:47.422Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"es6compat": {
			"value": "http://kangax.github.io/es5-compat-table/es6/#For..of_loops",
			"creator": "Havvy",
			"date": "2014-01-13T21:05:53.106Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"mondays": {
			"value": "\"first day of the work week\"",
			"creator": "blackkbot",
			"date": "2014-01-19T12:36:10.750Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"thumbs up": {
			"value": "👍",
			"creator": "ljharb",
			"date": "2014-01-21T00:29:20.527Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"composition": {
			"value": "Computer science classes say, \"inheritance all the way\". Experienced programmers say, \"prefer composition over inheritance\". See: http://en.wikipedia.org/wiki/Composition_over_inheritance, http://www.stackoverflow.com/questions/49002/prefer-composition-over-inheritance",
			"creator": "ljharb",
			"date": "2014-01-22T08:51:48.126Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"nodeschool": {
			"value": "learn some node.js basics thru bite sized exercises here: http://nodeschool.io/",
			"creator": "diamonds",
			"date": "2014-01-22T16:20:43.149Z",
			"popularity": 5,
			"editors": [],
			"changes": []
		},
		"snip $": {
			"value": "This snippet mimics jQuery syntax while being much lighter: function $(sel, parent){ return Array.prototype.slice.call((parent || document).querySelectorAll(sel)); }",
			"creator": "GreenJello__",
			"date": "2014-01-24T03:08:22.868Z",
			"popularity": 13,
			"editors": [
				"GreenJello__"
			],
			"changes": [
				{
					"date": "2014-01-24T03:33:40.373Z",
					"editor": "GreenJello__",
					"old-value": "This snippet mimics jQuery syntax while being much lighter: function $(sel){ return Array.prototype.slice.call(document.querySelectorAll(sel)); }",
					"new-value": "This snippet mimics jQuery syntax while being much lighter: function $(sel, parent){ return Array.prototype.slice.call((parent || document).querySelectorAll(sel)); }"
				}
			]
		},
		"snip choice": {
			"value": "This function takes an array or string, and returns a random item or character from it: function choice(xs){ return xs[Math.floor(Math.random() * xs.length)] }",
			"creator": "GreenJello",
			"date": "2014-01-24T22:16:12.045Z",
			"popularity": 4,
			"editors": [],
			"changes": []
		},
		"prototypes are not classes": {
			"value": "“Prototypes are not classes, and neither are constructor functions bundled with prototypes. They don’t encapsulate their private data, and they don’t have a metaclass object defining their behaviour. A prototype is to a class as a database record is to a model object.” — http://raganwald.com/2014/01/19/prototypes-are-not-classes.html",
			"creator": "Sorella",
			"date": "2014-01-24T23:08:58.576Z",
			"popularity": 3,
			"editors": [],
			"changes": []
		},
		"placehold": {
			"value": "Imaginary variables such as \"string\", \"number\", \"array\", \"object\", and \"element\" and the shorter str, num, arr, and obj are used in code examples.  They're not special variables; you should replace them with your own variables of that type. ",
			"creator": "GreenJello",
			"date": "2014-01-25T00:18:44.808Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"sort": {
			"value": "Array.prototype.sort sorts lexicographic (casting to string) by default. Pass a comparator function as the first arg if you want to sort otherwise (and without implicit casting).",
			"creator": "Havvy",
			"date": "2014-01-25T23:42:46.949Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"api over ajax": {
			"value": "It's best to not scatter AJAX calls around your code.  Instead create an API providing functions that indicate behavior.  Later you may create a version of this API that saves to a different medium, such as localStorage.",
			"creator": "GreenJello",
			"date": "2014-01-26T09:10:13.136Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"snip itar": {
			"value": "To loop over an array, you can use a for loop.  This will log each item in the array to the console: for (var i=0; i<array.length; i++){ var item = array[i];  console.log(item); }",
			"creator": "GreenJello",
			"date": "2014-01-26T09:56:41.615Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"grammar": {
			"value": "Take it to ##english",
			"creator": "Havvy",
			"date": "2014-01-27T05:43:33.273Z",
			"popularity": 3,
			"editors": [],
			"changes": []
		},
		"works in fiddle": {
			"value": "It doesn't work normally, but you can't reproduce the problem?  That's a good indication that you can rule out any code in the fiddle as the problem.  ",
			"creator": "GreenJello",
			"date": "2014-01-30T07:02:55.767Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"rofl": {
			"value": "I'm serious.",
			"creator": "ashnur",
			"date": "2014-01-30T07:06:59.275Z",
			"popularity": 4,
			"editors": [],
			"changes": []
		},
		"sicp": {
			"value": "interactive sicp:  http://xuanji.appspot.com/isicp/1-1-elements.html | pdf: https://github.com/sarabander/sicp-pdf/blob/master/sicp.pdf | html: http://sarabander.github.io/sicp/html/index.xhtml",
			"creator": "ashnur",
			"date": "2014-01-30T15:29:39.811Z",
			"popularity": 8,
			"editors": [
				"ashnur"
			],
			"changes": [
				{
					"date": "2014-01-30T15:33:00.784Z",
					"editor": "ashnur",
					"old-value": "interactive sicp:  http://xuanji.appspot.com/isicp/1-1-elements.html",
					"new-value": "interactive sicp:  http://xuanji.appspot.com/isicp/1-1-elements.html | pdf: https://github.com/sarabander/sicp-pdf/blob/master/sicp.pdf | html: http://sarabander.github.io/sicp/html/index.xhtml"
				}
			]
		},
		"panic": {
			"value": "\"Don't Panic.\" It's the first helpful or intelligible thing anybody's said to me all day.",
			"creator": "Maxdamantus",
			"date": "2014-02-02T04:38:41.248Z",
			"popularity": 5,
			"editors": [
				"sukima"
			],
			"changes": [
				{
					"date": "2014-02-02T04:46:09.152Z",
					"editor": "sukima",
					"old-value": "There is nothing to panic about but panicking itself.",
					"new-value": "\"Don't Panic.\" It's the first helpful or intelligible thing anybody's said to me all day."
				}
			]
		},
		"rule 1": {
			"value": "When learning JS, forget what you know about other languages; or you'll try to do things in very weird ways.",
			"creator": "GreenJello",
			"date": "2014-02-02T12:52:49.671Z",
			"popularity": 15,
			"editors": [],
			"changes": []
		},
		"rule 2": {
			"value": "Premature optimizations are responsible for the death of many projects.  Don't subject your project the disease.",
			"creator": "GreenJello",
			"date": "2014-02-02T12:53:39.874Z",
			"popularity": 9,
			"editors": [
				"GreenJello"
			],
			"changes": [
				{
					"date": "2014-04-20T02:19:36.019Z",
					"editor": "GreenJello",
					"old-value": "Premature optimizations are responsible for the death of many projects.  Don't subject your project the the disease.",
					"new-value": "Premature optimizations are responsible for the death of many projects.  Don't subject your project the disease."
				}
			]
		},
		"rule 3": {
			"value": "Rules suck.",
			"creator": "GreenJello",
			"date": "2014-02-02T13:01:08.715Z",
			"popularity": 6,
			"editors": [],
			"changes": []
		},
		"rule 4": {
			"value": "Are you still trying?",
			"creator": "GreenJello",
			"date": "2014-02-02T13:01:48.507Z",
			"popularity": 4,
			"editors": [
				"D[4]ni"
			],
			"changes": [
				{
					"date": "2014-02-02T13:02:09.664Z",
					"editor": "D[4]ni",
					"old-value": "That's all folks :-)",
					"new-value": "Are you still trying?"
				}
			]
		},
		"rule 5": {
			"value": "...really?",
			"creator": "D[4]ni",
			"date": "2014-02-02T13:03:00.907Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"check console": {
			"value": "Check your console for errors.  Ctrl-Shift-J on Chrome, Ctrl-Shift-K on Firefox (Cmd-Option-J/K on Mac).  Chrome's developer tools are prefered.",
			"creator": "GreenJello",
			"date": "2014-02-09T21:00:12.442Z",
			"popularity": 6,
			"editors": [],
			"changes": []
		},
		"this help": {
			"alias": "thishelp",
			"creator": "GreenJello",
			"date": "2014-02-13T21:55:15.004Z",
			"popularity": 6,
			"editors": [],
			"changes": []
		},
		"mean": {
			"value": "MEAN (Mongo, Express, Angular, Node) is a boilerplate stack that provides a nice starting point for MongoDB, Node.js, Express, and AngularJS based applications. (http://mean.io)",
			"creator": "therealklanni",
			"date": "2014-02-13T23:01:23.411Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"nodejs": {
			"alias": "node.js",
			"creator": "",
			"date": "2014-02-13T23:45:27.558Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"confuse": {
			"value": "'You are talking about X, then about Y, then Z. You don't want our help; you are just thinking out loud…'",
			"creator": "yansanmo",
			"date": "2014-02-18T04:30:50.795Z",
			"popularity": 2,
			"editors": [
				"yansanmo",
				"Agamemnus",
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-02-18T04:31:55.494Z",
					"editor": "yansanmo",
					"old-value": "you are talking about X, then about Y, then Z, then ...",
					"new-value": "you are talking about X, then about Y, then Z, you don't want our help, just thinking out loud"
				},
				{
					"date": "2014-02-18T04:32:49.942Z",
					"editor": "Agamemnus",
					"old-value": "you are talking about X, then about Y, then Z, you don't want our help, just thinking out loud",
					"new-value": "You are talking about X, then about Y, then Z. You don't want our help; you are just thinking out loud... but hey, that is useful sometimes, too."
				},
				{
					"date": "2014-08-10T23:31:26.061Z",
					"editor": "ljharb",
					"old-value": "You are talking about X, then about Y, then Z. You don't want our help; you are just thinking out loud... but hey, that is useful sometimes, too.",
					"new-value": "'You are talking about X, then about Y, then Z. You don't want our help; you are just thinking out loud…'"
				}
			]
		},
		"made day": {
			"value": "Putting one more day in the \"made\" pile.",
			"creator": "GreenJello",
			"date": "2014-02-21T05:11:46.336Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"object keys": {
			"value": "To iterate over a object's keys, use something like: `Object.keys(foo).forEach(function (key) { foo[key]; });` See !es5 shim to add these to older browsers.",
			"creator": "ljharb",
			"date": "2014-02-22T08:30:03.179Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"completion value": {
			"value": "Every statement in JavaScript has what is known as a `completion value.` That value is printed to the console/REPL after a statement is executed. For some statements, such as `var` the completion value is always 'undefined' but for others, such as `if` and `for`, the completion value takes on the value of the last expression executed inside the statement.",
			"creator": "ImBcmDth",
			"date": "2014-02-23T06:02:13.338Z",
			"popularity": 5,
			"editors": [],
			"changes": []
		},
		"imbcmdth": {
			"alias": "completion value",
			"creator": "gkatsev",
			"date": "2014-02-23T06:05:56.991Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"array#map": {
			"value": ">> [1, 2, 3, 4].map(function(n) { return n * 3; }); // Array#map applies a function to each element in an array and returns a new array with the results. In this case, we double each number.",
			"creator": "dwcook",
			"date": "2014-02-23T07:26:54.979Z",
			"popularity": 13,
			"editors": [
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-03-22T04:26:05.811Z",
					"editor": "ljharb",
					"old-value": ">> [1, 2, 3, 4].map(function(n) { return n * 2; }); // Array#map applies a function to each element in an array and returns a new array with the results. In this case, we double each number.",
					"new-value": "[1, 2, 3, 4].map(function(n) { return n * 3; }); // Array#map applies a function to each element in an array and returns a new array with the results. In this case, we double each number."
				},
				{
					"date": "2014-03-22T04:26:14.006Z",
					"editor": "ljharb",
					"old-value": "[1, 2, 3, 4].map(function(n) { return n * 3; }); // Array#map applies a function to each element in an array and returns a new array with the results. In this case, we double each number.",
					"new-value": ">> [1, 2, 3, 4].map(function(n) { return n * 3; }); // Array#map applies a function to each element in an array and returns a new array with the results. In this case, we double each number."
				}
			]
		},
		"trolls": {
			"value": "Trolls have a host of psychological disorders. Don't hate them - pity them, for they are pathetic, and suffering. http://www.slate.com/articles/health_and_science/climate_desk/2014/02/internet_troll_personality_study_machiavellianism_narcissism_psychopathy.html",
			"creator": "ljharb",
			"date": "2014-02-23T20:13:25.545Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"eof": {
			"value": "buzzzzzZZZZZZZZZZ!  Times up!  And the winner is.... none of you!  Better luck next time.",
			"creator": "GreenJello",
			"date": "2014-02-24T03:47:08.937Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"unit testing": {
			"value": "Jasmine is the most popular, which means the most plugins; Mocha has better async support; minimalists like tape and/or should",
			"creator": "GreenJello",
			"date": "2014-02-25T04:31:59.233Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"rule of 0s": {
			"value": "Some libraries *cough*jQuery*cough* always have several bug fix releases after the X.X.0 release.  It might be a good idea to not use any X.X.0 releases of those libraries.  There's probably a few bugs.",
			"creator": "GreenJello",
			"date": "2014-02-25T09:43:28.954Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"rule 6": {
			"value": "Don't spam the channel!",
			"creator": "GreenJello",
			"date": "2014-03-02T00:22:50.172Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"insult": {
			"value": "'you are too strict!'",
			"creator": "ashnur",
			"date": "2014-03-02T18:49:59.474Z",
			"popularity": 3,
			"editors": [],
			"changes": []
		},
		"iterable array": {
			"value": ">> Array.apply(null, Array(3)).map(function(n,i){ return i*i})",
			"creator": "ashnur",
			"date": "2014-03-07T13:59:15.925Z",
			"popularity": 4,
			"editors": [
				"ashnur"
			],
			"changes": [
				{
					"date": "2014-03-07T13:59:40.508Z",
					"editor": "ashnur",
					"old-value": ">> Array.apply(null, Array(3)).map(function(n){ return n*n})",
					"new-value": ">> Array.apply(null, Array(3)).map(function(n,i){ return i*i})"
				}
			]
		},
		"object.assign": {
			"value": "Using !es6 shim, you can do `Object.assign(target, source1, source2, sourceN)` for an elegant $.extend / _.extend replacement!",
			"creator": "ljharb",
			"date": "2014-03-12T00:25:52.075Z",
			"popularity": 14,
			"editors": [
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-04-10T17:54:36.718Z",
					"editor": "ljharb",
					"old-value": "Using !es6 shim, you can do [source1, source2, source3].reduce(Object.assign, target) for an elegant $.extend / _.extend replacement!",
					"new-value": "Using !es6 shim, you can do `Object.assign(target, source1, source2, sourceN)` for an elegant $.extend / _.extend replacement!"
				}
			]
		},
		"jquery-like": {
			"value": "tirejs.com, zeptojs.com ... more here ...",
			"creator": "Agamemnus",
			"date": "2014-03-15T12:49:01.171Z",
			"popularity": 2,
			"editors": [
				"Agamemnus"
			],
			"changes": [
				{
					"date": "2014-03-15T12:50:41.782Z",
					"editor": "Agamemnus",
					"old-value": "http://tirejs.com/ , ... more here ...",
					"new-value": "tirejs.com, zeptojs.com ... more here ..."
				}
			]
		},
		"zero": {
			"value": "Zeros in Javascript: <http://zero.milosz.ca/>",
			"creator": "ljharb",
			"date": "2014-03-17T00:39:41.567Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"zeros": {
			"alias": "zero",
			"creator": "ljharb",
			"date": "2014-03-17T00:39:46.360Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"flatten": {
			"value": "|> var flatten = function flatten(arr) { return arr.reduce(function (a, b) { return a.concat(b); }, []); };",
			"creator": "ljharb",
			"date": "2014-03-19T16:33:51.897Z",
			"popularity": 10,
			"editors": [
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-03-19T16:34:10.470Z",
					"editor": "ljharb",
					"old-value": ">> var flatten = function flatten(arr) { return arr.reduce(function (a, b) { return a.concat(b); }, []); };",
					"new-value": "|> var flatten = function flatten(arr) { return arr.reduce(function (a, b) { return a.concat(b); }, []); };"
				}
			]
		},
		"object.create": {
			"value": "The Object.create() method creates a new object with the specified prototype object and properties. (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create)",
			"creator": "therealklanni",
			"date": "2014-03-20T20:32:52.637Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"showus": {
			"alias": "code",
			"creator": "yorick",
			"date": "2014-03-21T23:00:09.716Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"callback hell": {
			"alias": "callbackhell",
			"creator": "ljharb",
			"date": "2014-03-22T04:31:47.536Z",
			"popularity": 4,
			"editors": [],
			"changes": []
		},
		"factoid": {
			"alias": "usage",
			"creator": "ljharb",
			"date": "2014-03-22T04:37:27.813Z",
			"popularity": 3,
			"editors": [
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-03-22T04:38:05.364Z",
					"editor": "ljharb",
					"old-alias": "factoids",
					"new-alias": "usage"
				}
			]
		},
		">>": {
			"alias": "!>>",
			"creator": "ImBcmDth",
			"date": "2014-03-22T19:44:54.278Z",
			"popularity": 12,
			"editors": [],
			"changes": []
		},
		"onfoo": {
			"value": "Using \".onclick\", \".onchange\", or \"on\" anything is bad practice and results in poorly factored, hard-to-manage code; as well as limiting you to one event listener per event. Consider attaching your events with addEventListener, instead, eg: https://developer.mozilla.org/en/DOM/element.addEventListener",
			"creator": "ljharb",
			"date": "2014-03-23T18:29:39.701Z",
			"popularity": 17,
			"editors": [],
			"changes": []
		},
		"dis guy": {
			"value": "<-- Can you believe this person's chutzpah!?",
			"creator": "ImBcmDth",
			"date": "2014-03-23T19:07:49.429Z",
			"popularity": 3,
			"editors": [
				"ImBcmDth"
			],
			"changes": [
				{
					"date": "2014-03-23T19:34:01.460Z",
					"editor": "ImBcmDth",
					"old-value": "<-- Can you believe the chutzpah of this person?",
					"new-value": "<-- Can you believe this person's chutzpah!?"
				}
			]
		},
		"==": {
			"alias": "comparisons",
			"creator": "",
			"date": "2014-03-23T23:44:47.732Z",
			"popularity": 3,
			"editors": [],
			"changes": []
		},
		"!=": {
			"alias": "comparisons",
			"creator": "",
			"date": "2014-03-23T23:45:06.238Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"=": {
			"alias": "comparisons",
			"creator": "",
			"date": "2014-03-23T23:49:10.518Z",
			"popularity": 3,
			"editors": [],
			"changes": []
		},
		"enumberable": {
			"value": "Enumerations of numbers.",
			"creator": "therealklanni",
			"date": "2014-03-24T17:20:30.214Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"delay": {
			"value": "JavaScript doesn't have a concept of \"sleep\" or \"wait\". This functionality may be provided by the environment, such as browser JS's setTimeout. E.g., http://jsfiddle.net/8Y5qe/. jQuery and many other libraries support promises, e.g. http://jsfiddle.net/4n9Gu/.  Also take a look at https://github.com/caolan/async https://github.com/petkaantonov/bluebird https://github.com/kriskowal/q when you have a lot of callbacks.",
			"creator": "dwcook",
			"date": "2014-03-26T02:21:37.430Z",
			"popularity": 17,
			"editors": [
				"dwcook"
			],
			"changes": [
				{
					"date": "2014-03-26T02:27:42.597Z",
					"editor": "dwcook",
					"old-value": "JavaScript doesn't have a concept of \"sleep\" or \"wait\". This functionality may be provided in an environment-dependent way. For example, browser JS has setTimeout, which accepts a callback and a number of milliseconds and calls it after that amount of time. See http://jsfiddle.net/8Y5qe/ for an example. jQuery and many other libraries support promises, e.g. http://jsfiddle.net/4n9Gu/.  Also take a look at https://github.com/caolan/async h",
					"new-value": "JavaScript doesn't have a concept of \"sleep\" or \"wait\". This functionality may be provided in an environment-dependent way, such as browser JS's setTimeout. See http://jsfiddle.net/8Y5qe/ for an example. jQuery and many other libraries support promises, e.g. http://jsfiddle.net/4n9Gu/.  Also take a look at https://github.com/caolan/async https://github.com/petkaantonov/bluebird https://github.com/kriskowal/q when you have a lot of callbac"
				},
				{
					"date": "2014-03-26T02:30:07.626Z",
					"editor": "dwcook",
					"old-value": "JavaScript doesn't have a concept of \"sleep\" or \"wait\". This functionality may be provided in an environment-dependent way, such as browser JS's setTimeout. See http://jsfiddle.net/8Y5qe/ for an example. jQuery and many other libraries support promises, e.g. http://jsfiddle.net/4n9Gu/.  Also take a look at https://github.com/caolan/async https://github.com/petkaantonov/bluebird https://github.com/kriskowal/q when you have a lot of callbac",
					"new-value": "JavaScript doesn't have a concept of \"sleep\" or \"wait\". This functionality may be provided by the environment, such as browser JS's setTimeout. E.g., http://jsfiddle.net/8Y5qe/ jQuery and many other libraries support promises, e.g. http://jsfiddle.net/4n9Gu/.  Also take a look at https://github.com/caolan/async https://github.com/petkaantonov/bluebird https://github.com/kriskowal/q when you have a lot of callbacks."
				},
				{
					"date": "2014-03-26T02:30:46.484Z",
					"editor": "dwcook",
					"old-value": "JavaScript doesn't have a concept of \"sleep\" or \"wait\". This functionality may be provided by the environment, such as browser JS's setTimeout. E.g., http://jsfiddle.net/8Y5qe/ jQuery and many other libraries support promises, e.g. http://jsfiddle.net/4n9Gu/.  Also take a look at https://github.com/caolan/async https://github.com/petkaantonov/bluebird https://github.com/kriskowal/q when you have a lot of callbacks.",
					"new-value": "JavaScript doesn't have a concept of \"sleep\" or \"wait\". This functionality may be provided by the environment, such as browser JS's setTimeout. E.g., http://jsfiddle.net/8Y5qe/. jQuery and many other libraries support promises, e.g. http://jsfiddle.net/4n9Gu/.  Also take a look at https://github.com/caolan/async https://github.com/petkaantonov/bluebird https://github.com/kriskowal/q when you have a lot of callbacks."
				}
			]
		},
		"async": {
			"alias": "delay",
			"creator": "dwcook",
			"date": "2014-03-26T02:31:14.334Z",
			"popularity": 8,
			"editors": [],
			"changes": []
		},
		"interactives": {
			"value": "http://www.codecombat.com, http://www.codewars.com, http://www.codecademy.com, http://www.khanacademy.org, http://alexnisnevich.github.io/untrusted/",
			"creator": "Agamemnus",
			"date": "2014-04-01T06:56:32.071Z",
			"popularity": 93,
			"editors": [
				"Agamemnus"
			],
			"changes": [
				{
					"date": "2014-04-02T03:15:22.913Z",
					"editor": "Agamemnus",
					"old-value": "codecombat.com, codewars.com, codecademy.com, khanacademy.org",
					"new-value": "http://www.codecombat.com, http://www.codewars.com, http://www.codecademy.com, http://www.khanacademy.org"
				},
				{
					"date": "2014-06-03T08:38:55.610Z",
					"editor": "Agamemnus",
					"old-value": "http://www.codecombat.com, http://www.codewars.com, http://www.codecademy.com, http://www.khanacademy.org",
					"new-value": "http://www.codecombat.com, http://www.codewars.com, http://www.codecademy.com, http://www.khanacademy.org, http://alexnisnevich.github.io/untrusted/"
				}
			]
		},
		"nih": {
			"value": "NIH: Not Invented Here syndrome. Don't reinvent the wheel - find somebody else who's solved your problem, and use their solution. It's highly likely it's better than what you'd be able to come up with, and if not, you can submit patches to improve theirs!",
			"creator": "ljharb",
			"date": "2014-04-04T20:26:47.596Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"eich": {
			"alias": "semicolons",
			"creator": "j201",
			"date": "2014-04-04T21:55:26.299Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"class": {
			"value": "JavaScript does not have class-based inheritance. Instead, it has constructor functions which initialize newly created objects that are linked to the constructor's prototype. These instances point to the prototype and use it for fallback property lookup. See also: !classes, !inheritance",
			"creator": "ljharb",
			"date": "2014-04-06T06:46:03.054Z",
			"popularity": 24,
			"editors": [
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-04-06T06:46:24.400Z",
					"editor": "ljharb",
					"old-value": "JavaScript does not have class-based inheritance. Instead, it has constructor functions which initialize newly created objects that are linked to the constructor's prototype. These instances point to the prototype and use it for fallback property lookup.",
					"new-value": "JavaScript does not have class-based inheritance. Instead, it has constructor functions which initialize newly created objects that are linked to the constructor's prototype. These instances point to the prototype and use it for fallback property lookup. See also: !classes, !inheritance"
				}
			]
		},
		"interactive": {
			"alias": "interactives",
			"creator": "therealklanni",
			"date": "2014-04-07T21:52:44.177Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"fairy whispers": {
			"value": "Publish JavaScript, not fairy whispers. https://groups.google.com/d/msg/nodejs/GB3leHT7dHI/oX4ULcWlhfIJ",
			"creator": "ljharb",
			"date": "2014-04-08T07:35:38.870Z",
			"popularity": 4,
			"editors": [],
			"changes": []
		},
		"iteration loop": {
			"value": "Is an iteration a loop? No: https://gist.github.com/robotlolita/7643014",
			"creator": "ljharb",
			"date": "2014-04-09T01:41:39.911Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"dot": {
			"alias": "bracket access",
			"creator": "",
			"date": "2014-04-15T00:49:13.734Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"amirite": {
			"value": "Yes.",
			"creator": "GreenJello",
			"date": "2014-04-15T22:11:10.143Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"wrong way": {
			"value": "You're trying to get data out of your html?  That seems a little backwards.  JavaScript has data, and the power to manipulate it.  HTML is a markup language, intended for displaying data.",
			"creator": "GreenJello",
			"date": "2014-04-16T01:47:18.065Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"extract": {
			"value": "extract({a: {b: {c: 5}}}, \"a.b.c\") gives 5 -- code: https://gist.github.com/brigand/8324917",
			"creator": "GreenJello",
			"date": "2014-04-16T01:56:21.939Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"src new": {
			"value": "function new(constr, args){ var o = Object.create(constr.prototype), r = constr.apply(o, args); return r !== null && typeof r == \"object\"? r : o; }",
			"creator": "Maxdamantus",
			"date": "2014-04-16T23:59:42.112Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"verbs": {
			"alias": "nouns",
			"creator": "ljharb",
			"date": "2014-04-19T21:18:38.096Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"let's go": {
			"value": "!shoot em' in the back now",
			"creator": "Maxdamantus",
			"date": "2014-04-20T08:30:14.964Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"last if something is only being applied to the 'last' one of many, you have a scoping problem. e.g.: in for (i": {
			"value": "0; i<5; ++i) {doX(function(){ doY(i) })}; `doY' might only receive 5 as a value. You can solve this using closures, so see !closures. For more info see http://www.mennovanslooten.nl/blog/post/62/",
			"creator": "yansanmo",
			"date": "2014-04-20T20:21:57.464Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"something": {
			"value": "just testing",
			"creator": "Qbix2",
			"date": "2014-04-24T00:16:06.374Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"!!": {
			"value": "I am supposed to say something compromising, because someone told me to when the channel was pretty quiet.",
			"creator": "Qbix2",
			"date": "2014-04-24T00:17:29.237Z",
			"popularity": 17,
			"editors": [],
			"changes": []
		},
		"es5-shim": {
			"value": "You can add most ES5 functionality to older (or modern non-compliant) browsers with https://github.com/es-shims/es5-shim/blob/master/es5-shim.js Even modern browsers (including latest Chrome) need it to be compliant!",
			"creator": "ashnur",
			"date": "2014-04-27T14:24:01.237Z",
			"popularity": 5,
			"editors": [
				"ashnur",
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-04-27T14:24:27.275Z",
					"editor": "ashnur",
					"old-value": "es5 shim",
					"new-value": "You can add most ES5 functionality to older (or modern non-compliant) browsers with https://github.com/es-shims/es5-shim/blob/master/es5-shim.js"
				},
				{
					"date": "2014-10-07T08:28:00.337Z",
					"editor": "ljharb",
					"old-value": "You can add most ES5 functionality to older (or modern non-compliant) browsers with https://github.com/es-shims/es5-shim/blob/master/es5-shim.js",
					"new-value": "You can add most ES5 functionality to older (or modern non-compliant) browsers with https://github.com/es-shims/es5-shim/blob/master/es5-shim.js Even modern browsers (including latest Chrome) need it to be compliant!"
				}
			]
		},
		"function": {
			"alias": "fe",
			"creator": "Sorella",
			"date": "2014-04-28T14:38:40.934Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"async return": {
			"value": "Asynchronous functions generally can't return values — once you go async, it's async forever. Instead of returning a value from the callback function, accept a callback as a parameter and call it with the value you want to return. See also: !promises",
			"creator": "ljharb",
			"date": "2014-05-14T05:38:56.825Z",
			"popularity": 4,
			"editors": [
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-05-14T05:44:04.681Z",
					"editor": "ljharb",
					"old-value": "Asynchronous callbacks usually can't return values. Once you go callbacks, it's callbacks forever. One possible alternative: !promises",
					"new-value": "Asynchronous callbacks usually can't return values — once you go callbacks, it's callbacks forever. The most common is to call the callback with either an error, or `null` and the final value once the async operation completes (this is common in #node.js). See also: !promises"
				},
				{
					"date": "2014-05-14T05:47:22.500Z",
					"editor": "ljharb",
					"old-value": "Asynchronous callbacks usually can't return values — once you go callbacks, it's callbacks forever. The most common is to call the callback with either an error, or `null` and the final value once the async operation completes (this is common in #node.js). See also: !promises",
					"new-value": "Asynchronous functions generally can't return values — once you go async, it's async forever. Instead of returning a value from the callback function, accept a callback as a parameter and call it with the value you want to return. See also: !promises"
				}
			]
		},
		"point of promises": {
			"value": "You're missing the point of promises: \"The point of promises is to give us back functional composition and error bubbling in the async world.\" https://gist.github.com/3889970",
			"creator": "ljharb",
			"date": "2014-05-14T05:50:20.181Z",
			"popularity": 5,
			"editors": [
				"ljharb"
			],
			"changes": [
				{
					"date": "2014-07-13T01:53:25.600Z",
					"editor": "ljharb",
					"old-value": "\"The point of promises is to give us back functional composition and error bubbling in the async world.\" https://gist.github.com/3889970",
					"new-value": "You're missing the point of promises: \"The point of promises is to give us back functional composition and error bubbling in the async world.\" https://gist.github.com/3889970"
				}
			]
		},
		"mars code": {
			"value": "Gerard Holzmann  JPL Laboratory for Reliable Software  https://www.usenix.org/conference/hotdep12/workshop-program/presentation/holzmann",
			"creator": "ashnur",
			"date": "2014-05-17T23:11:15.038Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"fuckit": {
			"alias": "fuckitjs",
			"creator": "therealklanni",
			"date": "2014-05-22T19:49:23.773Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"es6bin": {
			"value": "Try \"some\" ES6 today! http://benvie.github.io/continuum/",
			"creator": "diamonds",
			"date": "2014-05-28T20:14:02.451Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"charts": {
			"value": "chart.js (http://www.chartjs.org/) meteorcharts (http://meteorcharts.com)",
			"creator": "Agamemnus",
			"date": "2014-05-29T03:51:52.653Z",
			"popularity": 8,
			"editors": [
				"Agamemnus"
			],
			"changes": [
				{
					"date": "2014-05-29T03:53:34.780Z",
					"editor": "Agamemnus",
					"old-value": "Highcharts, chart.js meteorcharts",
					"new-value": "chart.js (http://www.chartjs.org/) meteorcharts (http://meteorcharts.com)"
				}
			]
		},
		"use": {
			"value": "don't use me!",
			"creator": "Maxdamantus",
			"date": "2014-06-05T07:35:17.565Z",
			"popularity": 2,
			"editors": [],
			"changes": []
		},
		"frameworks": {
			"value": "Check out http://todomvc.com/ for help deciding on a web framework.",
			"creator": "Agamemnus",
			"date": "2014-06-07T01:14:25.179Z",
			"popularity": 1,
			"editors": [
				"Agamemnus"
			],
			"changes": [
				{
					"date": "2014-06-07T01:14:35.979Z",
					"editor": "Agamemnus",
					"old-value": "Check out http://todomvc.com/ for help deciding on a web framework",
					"new-value": "Check out http://todomvc.com/ for help deciding on a web framework."
				}
			]
		},
		"google api": {
			"value": "Google APIs are very specific, and rarely get answered here.  StackOverflow is a good place to ask about them.",
			"creator": "GreenJello_",
			"date": "2014-06-18T03:40:27.436Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"gapi": {
			"value": "Google APIs are very specific, and rarely get answered here.  StackOverflow is a good place to ask about them.",
			"creator": "GreenJello_",
			"date": "2014-06-18T03:40:41.285Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"games": {
			"value": "#bbg is the main channel for JavaScript game development (browser based games)",
			"creator": "GreenJello",
			"date": "2014-06-27T23:09:52.134Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"carousel": {
			"value": "http://shouldiuseacarousel.com/",
			"creator": "j201",
			"date": "2014-07-16T00:39:33.537Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"php book": {
			"value": "Read \"PHP: The Good Parts\" http://i.imgur.com/Knuuz4w.png",
			"creator": "GreenJello",
			"date": "2014-07-24T22:38:06.628Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"idiomatic": {
			"value": "idiomatic is a popular style guide for JavaScript.  Unlike many style guides, it's flexible, but still enables other developers to read your code easily. https://github.com/rwaldron/idiomatic.js/",
			"creator": "GreenJello",
			"date": "2014-08-06T03:35:46.249Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"browser bugs": {
			"value": "Curious how well your favorite browser complies with ES5 & ES6? Check out https://cdn.rawgit.com/es-shims/es5-shim/master/tests/native.html and https://cdn.rawgit.com/es-shims/es6-shim/master/test/native.html & softly weep.",
			"creator": "ljharb",
			"date": "2014-08-08T05:55:25.259Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"animation": {
			"value": "http://greensock.com",
			"creator": "Agamemnus",
			"date": "2014-08-11T02:20:39.390Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"animations": {
			"value": "http://greensock.com",
			"creator": "Agamemnus",
			"date": "2014-08-11T02:20:47.595Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"dirty dancing": {
			"value": "https://www.youtube.com/watch?v=Vzs4_-gYNwk 1:00",
			"creator": "Agamemnus",
			"date": "2014-08-11T08:53:32.606Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"snip qsa": {
			"value": "This snippet mimics jQuery syntax while being much lighter: function qsa(sel, parent){ return Array.prototype.slice.call((parent || document).querySelectorAll(sel)); }",
			"creator": "GreenJello",
			"date": "2014-08-13T09:56:31.939Z",
			"popularity": 3,
			"editors": [],
			"changes": []
		},
		"byod": {
			"value": "bring your own disaster http://strategy-madlibs.herokuapp.com/",
			"creator": "blackkbot",
			"date": "2014-08-16T10:07:48.652Z",
			"popularity": 3,
			"editors": [],
			"changes": []
		},
		"es6-shim": {
			"alias": "es6 shim",
			"creator": "ljharb",
			"date": "2014-08-16T22:00:36.485Z",
			"popularity": 3,
			"editors": [],
			"changes": []
		},
		"range": {
			"value": "|> function range(start, end) { return Array.apply(Array, Array(end + 1 - start)).map(function (_, i) { return i + start; }); }",
			"creator": "ljharb",
			"date": "2014-08-17T12:05:59.180Z",
			"popularity": 3,
			"editors": [],
			"changes": []
		},
		"beginner": {
			"value": "http://webapplist.info/blog/development/html5-development/lets-build-an-html5-game-beginner-tutorial-part-1/",
			"creator": "Agamemnus",
			"date": "2014-08-17T20:08:26.079Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"plugins": {
			"value": "It's often unlikely someone who has used X plugin will see your message.  StackOverflow is a better medium for questions about plugins.",
			"creator": "GreenJello",
			"date": "2014-08-18T06:24:17.108Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"$ magic": {
			"value": "jQuery is magical, for example the $ function can be called in any of these ways, and more: $('.a'), $('.a', $(el)) $(el), $([el1, el2]), $({}), $($(el)), $('<div>'), $('<div>', document), $('<div>', {id: 'x'}), $(function(){})",
			"creator": "GreenJello",
			"date": "2014-08-20T21:39:11.541Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"( [morenoh149] foo": {
			"value": "bar | foo =~ s/expression/replace/gi )",
			"creator": "morenoh151",
			"date": "2014-08-25T08:24:02.915Z",
			"popularity": 0,
			"editors": [
				"morenoh151"
			],
			"changes": [
				{
					"date": "2014-08-25T08:25:04.936Z",
					"editor": "morenoh151",
					"old-value": "bar )",
					"new-value": "bar | foo =~ s/expression/replace/gi )"
				}
			]
		},
		"tabs vs spaces": {
			"alias": "semicolons",
			"creator": "j201",
			"date": "2014-08-30T01:41:11.751Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		},
		"a": {
			"value": "5",
			"creator": "raypulver",
			"date": "2014-08-31T19:55:31.517Z",
			"popularity": 3,
			"editors": [],
			"changes": []
		},
		"smart": {
			"value": "http://www.catb.org/~esr/faqs/smart-questions.html",
			"creator": "ashnur",
			"date": "2014-09-06T16:19:41.273Z",
			"popularity": 4,
			"editors": [],
			"changes": []
		},
		"auth": {
			"value": "Please don't write your own auth. Read all of this: http://stackoverflow.com/questions/549/the-definitive-guide-to-form-based-website-authentication",
			"creator": "ljharb",
			"date": "2014-09-23T02:02:36.756Z",
			"popularity": 0,
			"editors": [],
			"changes": []
		},
		"pain": {
			"alias": "java",
			"creator": "ljharb",
			"date": "2014-09-29T04:54:12.979Z",
			"popularity": 1,
			"editors": [],
			"changes": []
		}
	},
	"delete_log": [
		{
			"date": "2013-12-16T22:02:08.224Z",
			"editor": "dsamarin",
			"key": "callbacks",
			"value": {
				"value": "Callback hell is easily avoidable. Check out http://callbackhell.com , and look into Promises ( https://gist.github.com/domenic/3889970 )",
				"popularity": 19,
				"creator": "ljharb",
				"editors": []
			}
		},
		{
			"date": "2013-12-16T22:02:11.708Z",
			"editor": "dsamarin",
			"key": "callback",
			"value": {
				"alias": "callbacks",
				"popularity": 2
			}
		},
		{
			"date": "2013-12-28T04:01:20.053Z",
			"editor": "blackkbot",
			"key": "blackkbot",
			"value": {
				"value": "master",
				"creator": "blackkbot",
				"date": "2013-12-28T04:01:06.831Z",
				"popularity": 1,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2013-12-28T04:01:58.967Z",
			"editor": "blackkbot",
			"key": "blackkbot",
			"value": {
				"value": "function blackkbot(){return true;}",
				"creator": "blackkbot",
				"date": "2013-12-28T04:01:49.637Z",
				"popularity": 1,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2013-12-28T04:24:35.769Z",
			"editor": "blackkbot",
			"key": "blackkbot",
			"value": {
				"value": "(boolean) true;",
				"creator": "blackkbot",
				"date": "2013-12-28T04:02:19.575Z",
				"popularity": 4,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-01-08T22:44:19.058Z",
			"editor": "blackkbot",
			"key": "sigh",
			"value": {
				"value": "s/expression/replace/gi",
				"creator": "blackkbot",
				"date": "2014-01-08T22:44:06.487Z",
				"popularity": 1,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-01-13T21:06:52.323Z",
			"editor": "Sorella",
			"key": "add es6compat",
			"value": {
				"value": "http://kangax.github.io/es5-compat-table/es6/#For..of_loops",
				"creator": "Havvy",
				"date": "2014-01-13T21:04:59.947Z",
				"popularity": 0,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-01-16T07:26:11.682Z",
			"editor": "ljharb",
			"key": "include",
			"value": {
				"value": "Include another JavaScript file programmatically with JavaScript: http://www.phpied.com/javascript-include/",
				"popularity": 6
			}
		},
		{
			"date": "2014-02-05T06:25:45.475Z",
			"editor": "ImBcmDth",
			"key": "unemployment gitmo",
			"value": {
				"value": "http://www.cracked.com/article_20322_6-ways-companies-are-secretly-screwing-job-applicants_p2.html",
				"creator": "Agamemnus",
				"date": "2014-02-05T06:25:13.376Z",
				"popularity": 0,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-02-08T05:36:35.655Z",
			"editor": "ImBcmDth",
			"key": "lmgtfy",
			"value": {
				"value": "http://bit.ly/v8vx4A",
				"creator": "blackkbot",
				"date": "2014-01-07T18:16:13.527Z",
				"popularity": 2,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-02-13T06:39:59.127Z",
			"editor": "ashnur",
			"key": "thisgonnabreak@iamuser",
			"value": {
				"value": "iwonder",
				"creator": "ashnur",
				"date": "2014-02-13T06:39:24.872Z",
				"popularity": 1,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-02-23T06:05:55.300Z",
			"editor": "gkatsev",
			"key": "imbcmdth",
			"value": {
				"value": "A real sport. In the figurative sense, not related to physical activity.",
				"creator": "dwcook",
				"date": "2013-12-16T02:52:45.199Z",
				"popularity": 1,
				"editors": [
					"dwcook"
				],
				"changes": [
					{
						"date": "2013-12-16T02:53:17.636Z",
						"editor": "dwcook",
						"old-value": "A real sport.",
						"new-value": "A real sport. In the figurative sense, not related to physical activity."
					}
				]
			}
		},
		{
			"date": "2014-03-16T21:53:49.128Z",
			"editor": "ashnur",
			"key": "gd",
			"value": {
				"value": "part of php",
				"creator": "Agamemnus",
				"date": "2014-03-16T21:53:17.920Z",
				"popularity": 1,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-03-22T04:30:31.212Z",
			"editor": "ljharb",
			"key": "test factoid",
			"value": {
				"value": ">> 'roar'",
				"creator": "dwcook",
				"date": "2014-03-05T21:37:18.530Z",
				"popularity": 1,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-03-22T19:42:42.749Z",
			"editor": "ImBcmDth",
			"key": "!>> ~",
			"value": {
				"value": "s/^/To run code use /",
				"creator": "ImBcmDth",
				"date": "2014-03-22T19:42:04.828Z",
				"popularity": 0,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-03-23T23:17:59.269Z",
			"editor": "dwcook",
			"key": "=",
			"value": {
				"value": "= testing",
				"creator": "dwcook",
				"date": "2014-03-23T23:17:47.977Z",
				"popularity": 0,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-03-23T23:20:14.718Z",
			"editor": "ImBcmDth",
			"key": "\\x3d",
			"value": {
				"value": "test",
				"creator": "ImBcmDth",
				"date": "2014-03-23T23:20:04.587Z",
				"popularity": 0,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-03-23T23:44:44.033Z",
			"editor": "dwcook",
			"key": "==",
			"value": {
				"value": "wait a minute.. testing",
				"creator": "ImBcmDth",
				"date": "2014-03-23T23:43:11.526Z",
				"popularity": 2,
				"editors": [
					"ImBcmDth"
				],
				"changes": [
					{
						"date": "2014-03-23T23:43:45.587Z",
						"editor": "ImBcmDth",
						"old-value": "test",
						"new-value": "wait a minute.. testing"
					}
				]
			}
		},
		{
			"date": "2014-03-23T23:49:06.279Z",
			"editor": "FireFly",
			"key": "=",
			"value": {
				"value": "loose inequality is kinda bad",
				"creator": "FireFly",
				"date": "2014-03-23T23:41:27.443Z",
				"popularity": 0,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-03-26T02:31:09.639Z",
			"editor": "dwcook",
			"key": "async",
			"value": {
				"value": "JavaScript doesn't have a concept of \"sleep\" or \"wait\".  Instead you need to use callbacks.  See http://jsfiddle.net/8Y5qe/ for an example. jQuery and many other libraries support promises, e.g. http://jsfiddle.net/4n9Gu/.  Also take a look at https://github.com/caolan/async https://github.com/petkaantonov/bluebird https://github.com/kriskowal/q when you have a lot of callbacks.",
				"popularity": 14,
				"creator": "GreenJello",
				"editors": []
			}
		},
		{
			"date": "2014-04-03T02:35:46.056Z",
			"editor": "Agamemnus",
			"key": "nohints",
			"value": {
				"value": "Hints are forbidden!",
				"creator": "Agamemnus",
				"date": "2014-04-03T02:35:34.637Z",
				"popularity": 1,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-04-03T02:36:36.226Z",
			"editor": "Agamemnus",
			"key": "nohints",
			"value": {
				"value": "Hints are forbidden!",
				"creator": "Agamemnus",
				"date": "2014-04-03T02:36:23.990Z",
				"popularity": 0,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-04-03T02:37:24.528Z",
			"editor": "Agamemnus",
			"key": "hint",
			"value": {
				"value": "i am clueless",
				"creator": "blackkbot",
				"date": "2014-04-03T02:36:46.560Z",
				"popularity": 1,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-04-03T02:38:00.957Z",
			"editor": "Agamemnus",
			"key": "sentient",
			"value": {
				"value": "Johnny Depp? I'm not sure. I prefer him as a pirate.",
				"creator": "Agamemnus",
				"date": "2014-04-03T02:37:11.417Z",
				"popularity": 1,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-04-03T02:41:09.252Z",
			"editor": "Agamemnus",
			"key": "racist",
			"value": {
				"value": "No",
				"creator": "Agamemnus",
				"date": "2014-04-03T02:40:46.092Z",
				"popularity": 3,
				"editors": [
					"Agamemnus"
				],
				"changes": [
					{
						"date": "2014-04-03T02:40:53.950Z",
						"editor": "Agamemnus",
						"old-value": "Yes",
						"new-value": "No"
					}
				]
			}
		},
		{
			"date": "2014-04-03T02:42:17.248Z",
			"editor": "Agamemnus",
			"key": "racist",
			"value": {
				"value": "No",
				"creator": "Agamemnus",
				"date": "2014-04-03T02:41:18.519Z",
				"popularity": 1,
				"editors": [
					"Agamemnus"
				],
				"changes": [
					{
						"date": "2014-04-03T02:41:44.324Z",
						"editor": "Agamemnus",
						"old-value": "Yes",
						"new-value": "No"
					}
				]
			}
		},
		{
			"date": "2014-04-06T06:45:56.893Z",
			"editor": "ljharb",
			"key": "class",
			"value": {
				"alias": "classes",
				"popularity": 16
			}
		},
		{
			"date": "2014-06-17T19:40:53.605Z",
			"editor": "j201",
			"key": "premature ~",
			"value": {
				"value": "s/effeciency/efficiency/",
				"creator": "j201",
				"date": "2014-06-17T19:40:05.640Z",
				"popularity": 0,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-07-27T22:13:26.647Z",
			"editor": "Sorella",
			"key": "promises ~",
			"value": {
				"value": "s/see also !cps/contrast with !cps/",
				"creator": "Sorella",
				"date": "2014-07-27T22:13:12.389Z",
				"popularity": 0,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-07-30T20:12:36.526Z",
			"editor": "j201",
			"key": "ded ~",
			"value": {
				"value": "s/#browserify/##bootstrap - #browserify/",
				"creator": "j201",
				"date": "2014-07-30T20:12:04.968Z",
				"popularity": 0,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-08-10T23:30:45.614Z",
			"editor": "ljharb",
			"key": "paranoid programming",
			"value": {
				"value": "It is like defensive programming but to an extent that is irrational, like performing assignments twice just in case someone deletes one of them.",
				"creator": "Agamemnus",
				"date": "2013-12-27T07:22:06.772Z",
				"popularity": 1,
				"editors": [
					"ImBcmDth"
				],
				"changes": [
					{
						"date": "2013-12-27T07:23:27.218Z",
						"editor": "ImBcmDth",
						"old-value": "It is like defensive programming but to an extent that is insane, like doing assignments twice in case someone deletes one of them.",
						"new-value": "It is like defensive programming but to an extent that is irrational, like doing assignments twice in case someone deletes one of them.",
						"regex": "s/insane/irrational/"
					},
					{
						"date": "2013-12-27T07:24:03.993Z",
						"editor": "ImBcmDth",
						"old-value": "It is like defensive programming but to an extent that is irrational, like doing assignments twice in case someone deletes one of them.",
						"new-value": "It is like defensive programming but to an extent that is irrational, like performing assignments twice in case someone deletes one of them.",
						"regex": "s/doing/performing/"
					},
					{
						"date": "2013-12-27T07:24:25.636Z",
						"editor": "ImBcmDth",
						"old-value": "It is like defensive programming but to an extent that is irrational, like performing assignments twice in case someone deletes one of them.",
						"new-value": "It is like defensive programming but to an extent that is irrational, like performing assignments twice just in case someone deletes one of them.",
						"regex": "s/in c/just in c/"
					}
				]
			}
		},
		{
			"date": "2014-08-10T23:32:12.985Z",
			"editor": "ljharb",
			"key": "personal",
			"value": {
				"value": "##javascript is your personal scratchpad. For emergencies: http://nooooooooooooooo.com/",
				"creator": "Agamemnus",
				"date": "2014-03-30T02:42:08.329Z",
				"popularity": 2,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-08-10T23:35:04.506Z",
			"editor": "ljharb",
			"key": "reading",
			"value": {
				"value": "Mind downloads are all the rage nowadays. Reading is obsolete.. welcome to the future.",
				"creator": "Agamemnus",
				"date": "2014-07-20T06:11:29.810Z",
				"popularity": 1,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-08-10T23:35:49.468Z",
			"editor": "ljharb",
			"key": "organization",
			"value": {
				"value": "The biggest organizational challenge in Javascript is learning to combine visual screen construction and logical construction.",
				"creator": "Agamemnus",
				"date": "2014-08-04T21:15:10.161Z",
				"popularity": 0,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-08-10T23:35:57.106Z",
			"editor": "ljharb",
			"key": "slideshow",
			"value": {
				"value": "reveal.js",
				"creator": "Agamemnus",
				"date": "2014-08-05T20:20:15.759Z",
				"popularity": 0,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-08-11T02:18:43.903Z",
			"editor": "Agamemnus",
			"key": "animations",
			"value": {
				"value": "http://greensock.com",
				"creator": "Agamemnus",
				"date": "2014-08-11T02:17:03.150Z",
				"popularity": 1,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-08-11T02:20:08.944Z",
			"editor": "Agamemnus",
			"key": "animations | animation",
			"value": {
				"value": "http://greensock.com",
				"creator": "Agamemnus",
				"date": "2014-08-11T02:18:20.671Z",
				"popularity": 0,
				"editors": [
					"Agamemnus"
				],
				"changes": [
					{
						"date": "2014-08-11T02:19:30.833Z",
						"editor": "Agamemnus",
						"old-value": "http://greensock.com",
						"new-value": "http://greensock.com"
					}
				]
			}
		},
		{
			"date": "2014-08-16T10:05:47.749Z",
			"editor": "blackkbot",
			"key": "([byod]",
			"value": {
				"value": "bring your own disaster)",
				"creator": "blackkbot",
				"date": "2014-08-16T10:05:34.701Z",
				"popularity": 0,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-08-25T08:29:36.398Z",
			"editor": "gkatsev",
			"key": "foo",
			"value": {
				"value": "'this is the end'",
				"popularity": 28,
				"editors": [
					"Mortchek",
					"ImBcmDth",
					"bePolite",
					"morenoh151"
				],
				"changes": [
					{
						"date": "2014-03-05T16:59:31.098Z",
						"editor": "ImBcmDth",
						"old-value": "foo, bar, baz, and quux are commonly used metasyntactic variables. They stand for whatever you want. See http://www.catb.org/jargon/html/M/metasyntactic-variable.html",
						"new-value": "js> \"Mic check.\" + \"Check. Check.\"; // Is this thing on?"
					},
					{
						"date": "2014-03-05T17:00:45.887Z",
						"editor": "ImBcmDth",
						"old-value": "js> \"Mic check.\" + \"Check. Check.\"; // Is this thing on?",
						"new-value": "foo, bar, baz, and quux are commonly used metasyntactic variables. They stand for whatever you want. See http://www.catb.org/jargon/html/M/metasyntactic-variable.html"
					},
					{
						"date": "2014-05-02T21:53:22.161Z",
						"editor": "bePolite",
						"old-value": "foo, bar, baz, and quux are commonly used metasyntactic variables. They stand for whatever you want. See http://www.catb.org/jargon/html/M/metasyntactic-variable.html",
						"new-value": "bar"
					},
					{
						"date": "2014-08-25T08:26:33.470Z",
						"editor": "morenoh151",
						"old-value": "bar",
						"new-value": "'this is the end'"
					}
				]
			}
		},
		{
			"date": "2014-09-06T01:29:23.212Z",
			"editor": "ljharb",
			"key": "ljharb-inheritance",
			"value": {
				"value": "You should just avoid inheritance altogether.",
				"creator": "Agamemnus",
				"date": "2014-09-06T01:27:04.130Z",
				"popularity": 1,
				"editors": [],
				"changes": []
			}
		},
		{
			"date": "2014-10-07T08:36:02.916Z",
			"editor": "ljharb",
			"key": "zeph",
			"value": {
				"value": "\"\"",
				"creator": "MJCD",
				"date": "2014-09-20T17:13:00.113Z",
				"popularity": 3,
				"editors": [
					"zeph"
				],
				"changes": [
					{
						"date": "2014-09-20T17:40:46.019Z",
						"editor": "zeph",
						"old-value": "tittayyys!",
						"new-value": "\"\""
					}
				]
			}
		}
	]
}
